/*
 * tests/server/ShellUTest.cxxtest
 *
 * Copyright (C) 2016 Linas Vepstas
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <thread>
#include <unistd.h>

#include <opencog/util/Config.h>
#include <opencog/cogserver/server/CogServer.h>

using namespace opencog;

std::string cmd_exec(const char* cmd)
{
#define BUFSZ 1000
	char buf[1000];
	std::string result;
	std::shared_ptr<FILE> pope(popen(cmd, "r"), pclose);
	if (!pope) throw std::runtime_error("popen() failed!");
	while (!feof(pope.get())) {
		if (fgets(buf, BUFSZ, pope.get()) != NULL)
			result += buf;
	}
	return result;
}

void gargleblast(int tid, int reps)
{
	for (int i=0; i<reps; i++)
	{
		int j = i+10;
		char buf[1000];
		sprintf(buf, "echo '(Evaluation (Predicate \"visible face\") (List (Number %d)))\n' | nc -q 1 localhost 17333", j);

		std::string reso = cmd_exec(buf);

		// The current reply message is exactly:
		// opencog> Entering scheme shell; use ^D or a single . on a line by itself to exit.
		// guile> (EvaluationLink
		//   (PredicateNode "visible face")
		//   (ListLink
		//      (NumberNode "10.000000")
		//   )
		// )
		//
		// guile> 
		// guile> ; note blank space here
		// Which is exactly 278 chars long.
		// If the greeting changes, then adjust for the correct size.

#define CUR_MSG_SZ 278
		if (reso.size() != CUR_MSG_SZ)
			printf("Error: Create rep %d of %d in thread %d failed\n"
			       "\tGot: %lu >>>%s<<<\n",
			       i, reps, tid, reso.size(), reso.c_str());
		TS_ASSERT_EQUALS(CUR_MSG_SZ, reso.size());
		usleep(50000);

		if (20 <= i)
		{
			sprintf(buf, "echo '(cog-delete (Evaluation (Predicate \"visible face\") (List (Number %d))))\n' | nc -q 1 localhost 17333", j-20);
			std::string delo = cmd_exec(buf);

#define CUR_DEL_SZ 179
			if (delo.size() != CUR_DEL_SZ)
				printf("Error: Create rep %d of %d in thread %d failed\n"
				       "\tGot: %lu >>>%s<<<\n",
				       i, reps, tid, delo.size(), delo.c_str());
			TS_ASSERT_EQUALS(CUR_DEL_SZ, delo.size());
		}
		usleep(50000);
	}
}

class ShellUTest :  public CxxTest::TestSuite
{
private:
	CogServer* csrv;
	std::thread* main_loop;

public:

	ShellUTest()
	{
		logger().set_level(Logger::DEBUG);
		//logger().set_print_to_stdout_flag(true);
	}

	~ShellUTest()
	{
		// erase the log file if no assertions failed
		if (!CxxTest::TestTracker::tracker().suiteFailed())
			std::remove(logger().get_filename().c_str());
	}

	void setUp()
	{
		config().set("SERVER_PORT", "17333");

		csrv = new CogServer();
		csrv->loadModules();
		csrv->loadModule("libscheme-shell.so");
		csrv->enableNetworkServer();
		main_loop = new std::thread(&CogServer::serverLoop, csrv);
	}

	void tearDown()
	{
		csrv->stop();
		main_loop->join();
		delete main_loop;
		delete csrv;
	}

	void testControlD()
	{
		int rc = system("echo '(Concept \"42\")\n' | nc -q 1 localhost 17333");
		if (rc != 0) printf("Error: first call failed\n");
		TS_ASSERT_EQUALS(rc, 0);
		usleep(50000);

		// Well, I cannot figure out how to echo ctrl-D so use
		// a dot, instead. Should do the same thing.
		rc = system("echo 'scm\n(+ 2 2)\n.\n' | nc -q 1 localhost 17333");
		if (rc != 0) printf("Error: second call failed\n");
		TS_ASSERT_EQUALS(rc, 0);
		usleep(50000);

		rc = system("echo 'scm\n(Concept \"42\")\n' | nc -q 1 localhost 17333");
		if (rc != 0) printf("Error: third call failed\n");
		TS_ASSERT_EQUALS(rc, 0);
		usleep(50000);

		rc = system("echo '(+ 2 2)\n.\n' | nc -q 1 localhost 17333");
		if (rc != 0) printf("Error: fourth call failed\n");
		TS_ASSERT_EQUALS(rc, 0);
		usleep(50000);
	}

	void testMessaging()
	{
#define NT 20
		std::thread* pangalactic[NT];
		int j;
		for (j=0; j<NT; j++)
		{
			pangalactic[j] = new std::thread(&gargleblast, j, 60);
		}
		for (j=0; j<NT; j++)
		{
			pangalactic[j]->join();
			delete pangalactic[j];
		}
		sleep(5);
	}
};
