/** MOSESUTest.cxxtest ---
 *
 * Copyright (C) 2011 OpenCog Foundation
 *
 * Author: Nil Geisweiller <nilg@desktop>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>
#include <opencog/learning/moses/main/moses_exec.h>
#include "moses-framework.h"

using namespace opencog::moses;

const string MOSESUTest_dir = string(PROJECT_SOURCE_DIR) + "/tests/learning/moses/";

/**
 * MOSES test on toy problems
 */
class MOSESUTest : public CxxTest::TestSuite
{
public:
    MOSESUTest() {
        // logger().setPrintToStdoutFlag(true);
        // to control the log level use option -l
    }

    void test_2_parity() {
        moses_test_score({"-Hpa", "-k2"});
    }
    void test_2_parity_with_labels() {
        moses_test_score({"-Hpa", "-k2", "-W1"});
    }
    void test_3_parity_multi_thread() {
        moses_test_score({"-Hpa", "-k3", "-m100000", "-j4"});
    }
    void test_3_mux() {
        moses_test_score({"-Hmux", "-k1"});
    }
    void test_sa_2_parity() {
        moses_test_score({"-Hpa", "-k2", "-asa"});
    }
    void test_sa_3_mux() {
        moses_test_score({"-Hmux", "-k1", "-asa"});
    }
    void test_un_3_pa_multi_thread() {
        moses_test_score({"-Hpa", "-k3", "-aun", "-m100000", "-j4"});
    }
    void test_it() {
        string data_file_path("-i" + MOSESUTest_dir + "dataset.csv");
        string max_evals("-m1000");
        moses_test_score({data_file_path, max_evals}, -3);
    }

    /* SR is polynomial regression; it has a very deceptive scoring
     * function, and hill-climbing will utterly fail on it. Use the
     * -L1 flag to perform an exhaustive local search.
     */
    void test_sr_3() {
        moses_test_score({"-Hsr", "-k3", "-m100000", "-L1"});
    }
    void test_cp() {
        string tr_str("or(and(#2 !#3) #1 !#4 #5)");
        string cp_opt("-y");
        moses_test_combo({"-Hcp", cp_opt + tr_str}, {tr_str});
    }
    void test_kl() {
        string tr1_str("or(and(!#1 #2) and(#1 !#2))");
        string tr2_str("and(or(!#1 !#2) or(#1 #2))");
        string data_file_path("-i" + MOSESUTest_dir + "KL_test.csv");
        moses_test_combo({"-Hip", data_file_path, "-m500", "-lfine", "-U0", "-X0"},
                         {tr1_str, tr2_str});
    }
    void test_multi_kl() {
        string tr1_str("or(and(!#1 #2) and(#1 !#2))");
        string tr2_str("and(or(!#1 !#2) or(#1 #2))");
        string data_file_path("-i" + MOSESUTest_dir + "KL_test.csv");
        moses_test_combo({"-Hip", data_file_path,  data_file_path, "-m500", "-l fine", "-U0", "-X0"}, {tr1_str, tr2_str});
    }
};
