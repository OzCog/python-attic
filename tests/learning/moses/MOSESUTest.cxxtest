/** MOSESUTest.cxxtest --- 
 *
 * Copyright (C) 2011 OpenCog Foundation
 *
 * Author: Nil Geisweiller <nilg@desktop>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>
#include <opencog/learning/moses/main/moses_exec.h>

using namespace opencog::moses;

const string MOSESUTest_dir = string(PROJECT_SOURCE_DIR) + "/tests/learning/moses/";

/**
 * MOSES test on toy problems
 */
class MOSESUTest : public CxxTest::TestSuite {
    void moses_test(vector<string> arguments, score_t expected_sc = 0) {
        // build arguments
        char tempfile[] = "/tmp/MOSESUTestXXXXXX";
        int tmp = mkstemp(tempfile);
        std::cout << tmp << std::endl;
        arguments.insert(arguments.begin(), "moses-exec");
        arguments.push_back(string("-o").append(tempfile).c_str());
        // run moses
        moses_exec(arguments);
        // parse the result
        FILE* fp = fopen(tempfile, "r");
        __gnu_cxx::stdio_filebuf<char> pipe_buf(fp, ios_base::in);
        istream sp(&pipe_buf);
        string score;
        sp >> score;
        std::cout << "score = " << score << std::endl;
        pclose(fp);
        // check that the result is 0
        TS_ASSERT(lexical_cast<int>(score) == expected_sc);
    }
public:
    MOSESUTest() {
        // logger().setPrintToStdoutFlag(true);
        // to control the log level use option -l
    }

    void test_2_parity() {
        moses_test({"-Hpa", "-k2"});
    }
    void test_2_parity_with_labels() {
        moses_test({"-Hpa", "-k2", "-W1"});
    }
    void test_3_parity_multi_thread() {
        moses_test({"-Hpa", "-k3", "-m100000", "-j4"});
    }
    void test_3_mux() {
        moses_test({"-Hmux", "-k3"});
    }
    void test_sa_2_parity() {
        moses_test({"-Hpa", "-k2", "-asa"});
    }
    void test_sa_3_mux() {
        moses_test({"-Hmux", "-k3", "-asa"});
    }
    void test_un_3_pa() {
        moses_test({"-Hpa", "-k3", "-aun", "-m100000"});
    }
    void test_it() {
        string data_file_path("-i" + MOSESUTest_dir + "dataset.csv");
        string max_evals("-m1000");
        moses_test({data_file_path, max_evals}, -3);
    }
    // void test_sr_3() {
    //     moses_test({"-Hsr", "-k3", "-m100000"});
    // }
};
