/*
 * tests/learning/moses/representationUTest.cxxtest
 *
 * Copyright (C) 2010 Novamente LLC
 * All Rights Reserved
 *
 * Written by Nil Geisweiller
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>
#include <sstream>
#include <string>
#include <boost/assign/list_of.hpp>
#include <opencog/learning/moses/moses/representation.h>
#include <opencog/comboreduct/reduct/reduct.h>
#include <opencog/util/mt19937ar.h>

using namespace moses;
using namespace reduct;
using namespace combo;
//using namespace util;
using namespace std;
using boost::assign::list_of;

class representationUTest : public CxxTest::TestSuite {
public:
    combo_tree totree(string str) {
        stringstream ss(str);
        combo_tree tr;
        ss >> tr;
        return tr;
    }
public:

    void test_contin_rep() {
        opencog::MT19937RandGen rng(1);
        string tr_str = "+(*(+(*(+(*(+(*(#1 1.75) 1.875) #1) 0.75) 0.75) 1.375) 0.75) -1.25)";
        combo_tree tr = totree(tr_str);
        type_tree tt = infer_type_tree(tr);
        vertex_set ignore_ops = list_of(id::div)(id::exp)(id::log)(id::sin);
        representation rep(contin_reduction(ignore_ops, rng), tr, tt,
                           rng, ignore_ops);

        // @todo define a test
        TS_ASSERT(true);
    }
};
