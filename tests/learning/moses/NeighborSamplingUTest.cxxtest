#include <ctime>
#include <cxxtest/TestSuite.h>
#include <boost/math/special_functions/binomial.hpp>
#include <opencog/learning/moses/eda/field_set.h>
#include <opencog/learning/moses/moses/optimization.h>

using namespace eda;
using namespace moses;
using boost::math::binomial_coefficient;

class NeighborSamplingUTest : public CxxTest::TestSuite {
public:

    /**
     * measure the hamming distance of any instance of the deme to
     * center_inst, except center_inst of course
     * 
     * @param sample_size write the number of such neighbors
     * 
     * @param max_distance the distance maximum of a neighbor from
     *                     center_inst
     *
     * @param min_distance the minimum distance of a neighbor from
     *                     center_inst
     */
    template<typename ScoreT>
    void get_sample_size_and_distance(const eda::instance_set<ScoreT>& deme, 
                                      size_t& sample_size, 
                                      int& max_distance,
                                      int& min_distance,
                                      const eda::instance& center_inst) 
    {
        const eda::field_set& fs = deme.fields();
        OC_ASSERT(center_inst.size() == fs.packed_width(),
                  "Please make sure the given center_inst have the "
                  "same size with field_set's width");

        sample_size = 0;
        max_distance = 0;
        min_distance = fs.packed_width() * bits_per_packed_t;
        foreach(const eda::instance& inst, deme) {             
            int distance = fs.hamming_distance(center_inst, inst);
            // cout<<"instance:" << fs.stream(inst)<<endl;
            //cout <<"\t distance:" << distance <<endl;
            if(distance > 0) {
                if(distance > max_distance)
                    max_distance = distance;
                else if(distance < min_distance)
                    min_distance = distance;
                sample_size++;
            }
        }
    }

    template<typename ScoreT>
    void get_sample_size_and_distance(const eda::instance_set<ScoreT> & deme,
                                      size_t& sample_size, 
                                      int& max_distance,
                                      int& min_distance)
    {
        const eda::field_set& fs = deme.fields();
        // the default center instance as exemplar is set to 0
        eda::instance center_inst(fs.packed_width()); 
        
        get_sample_size_and_distance(deme, sample_size,
                                     max_distance, min_distance, center_inst);
       
    }

    // considering 'size' discs of arity 'arity' calculate the number
    // of neighbors at distance 'distance'
    size_t total_number_of_neighbors(int distance,
                                     size_t size, arity_t arity) {
        return power(arity-1, distance) *
            (int)binomial_coefficient<float>(size , distance);
    }

    void test_sample_from_neighborhood() 
    {    
        int rand_seed = clock();
        int distance;
        size_t sample_size,fs_size;
        arity_t arity ;
        size_t sampled_size;
        int sampled_max_distance;
        int sampled_min_distance;        
        opencog::MT19937RandGen rng(rand_seed);

        // 1. test, the exemplar is initialized to 0
        {
            distance  = 2;
            sample_size = 10;
            fs_size = 20;
            arity = 5;
            field_set fs(field_set::disc_spec(arity), fs_size);
            eda::instance_set<moses::combo_tree_score>  deme(sample_size,fs);

            moses::sample_from_neighborhood(deme.fields(),
                                            distance,
                                            sample_size,
                                            deme.begin(), rng);
            get_sample_size_and_distance(deme,
                                         sampled_size,
                                         sampled_max_distance,
                                         sampled_min_distance);
            // cout << endl << "sample_size:" << sampled_size << "
            //   max_distance:" << sampled_max_distance <<" min_distance
            //   :"<< sampled_min_distance <<endl;
            TS_ASSERT(sample_size == sampled_size);
            TS_ASSERT(distance == sampled_max_distance);
            TS_ASSERT(distance == sampled_min_distance);
        }
        
        // 2. test, the exemplar is given randomizely
        {
            distance  = 1;
            sample_size = 8;
            fs_size = 15;
            arity = 4;
            field_set fs(field_set::disc_spec(arity), fs_size);
            eda::instance_set<moses::combo_tree_score>  deme(sample_size,fs);
                        
            eda::instance center_inst(fs.packed_width());
            eda::randomize(fs, center_inst, rng);
          
            // cout<<fs.stream(center_inst)<<endl; 

            moses::sample_from_neighborhood(deme.fields(),
                                            distance,
                                            sample_size,
                                            deme.begin(),
                                            rng, center_inst);

            get_sample_size_and_distance(deme,sampled_size,
                                         sampled_max_distance,
                                         sampled_min_distance,
                                         center_inst);

            //  cout << endl << "sample_size:" << sampled_size << "  max_distance:" << 
            //   sampled_max_distance <<" min_distance :"<< sampled_min_distance <<endl;

            TS_ASSERT(sample_size == sampled_size);
            TS_ASSERT(distance == sampled_max_distance);
            TS_ASSERT(distance == sampled_min_distance);
        }
               
        // 3. test the contin_spec
        {
            distance = 1;
            sample_size = 1;
            fs_size = 2;
            
            field_set fs(field_set::contin_spec(0.0, 0.5, 0.5, 4), fs_size);
            eda::instance_set<moses::combo_tree_score> deme(sample_size, fs);
            
            eda::instance center_inst(fs.packed_width());
            eda::randomize(fs, center_inst, rng);
            
            cout << "the initial randomize instance:\n"
                 << fs.stream_raw(center_inst) << endl;
            
            moses::sample_from_neighborhood(deme.fields(),
                                            distance,
                                            sample_size,
                                            deme.begin(),
                                            rng, center_inst);

            get_sample_size_and_distance(deme,sampled_size,
                                         sampled_max_distance,
                                         sampled_min_distance,
                                         center_inst);
            
            //  cout << endl << "sample_size:" << sampled_size << "  max_distance:" << 
            //   sampled_max_distance <<" min_distance :"<< sampled_min_distance <<endl;
            
            TS_ASSERT(sample_size == sampled_size);
            TS_ASSERT(distance == sampled_max_distance);
            // TODO TS_ASSERT(distance == sampled_min_distance);
        }
     }


    void DISABLEtest_generate_all_in_neighborhood() 
    {
        {
            int distance = 2;
            arity_t arity = 3;
            size_t size = 5;
            field_set fs(field_set::disc_spec(arity), size);
            eda::instance_set<moses::combo_tree_score>  deme(1000,fs);

            eda::instance center_inst(fs.packed_width());
            int rand_seed = clock();
            opencog::MT19937RandGen rng(rand_seed);
            eda::randomize(fs, center_inst,rng); 
            // cout << "generate center_inst:" << fs.stream(center_inst) <<endl;
            moses::generate_all_in_neighborhood(deme.fields(),distance,deme.begin(), center_inst);
            size_t generated_size = 0;
            int generated_max_distance = 0;
            int generated_min_distance = 0;
            get_sample_size_and_distance(deme, generated_size, 
                                         generated_max_distance, generated_min_distance, center_inst);
            size_t total_size = total_number_of_neighbors(distance,size, arity);
            //  cout << generated_size << " " << generated_max_distance
            //      << " " << generated_min_distance <<endl;
            // cout << "total_size :" << total_size <<endl;
            TS_ASSERT(generated_size == total_size);
            TS_ASSERT(generated_max_distance == distance);
            TS_ASSERT(generated_min_distance == distance);
        }

        {
            int distance = 2;
            arity_t arity = 8;
            size_t size = 5;
            field_set fs(field_set::disc_spec(arity), size);
            eda::instance_set<moses::combo_tree_score>  deme(1000,fs);
            //    cout << "generate_all_in_neighborhood" << endl;
            moses::generate_all_in_neighborhood(deme.fields(),distance,deme.begin());
            size_t generated_size = 0;
            int generated_max_distance = 0;
            int generated_min_distance = 0;
            
            get_sample_size_and_distance(deme, generated_size, 
                                         generated_max_distance, generated_min_distance);
            // cout << generated_size << " " << generated_max_distance
            //  << " " << generated_min_distance <<endl;
            size_t total_size = total_number_of_neighbors(distance, size, arity);
            // cout << "total_size :" << total_size <<endl;
            TS_ASSERT(generated_size == total_size);
            TS_ASSERT(generated_max_distance == distance);
            TS_ASSERT(generated_min_distance == distance);
        }
    }
    
    void DISABLEtest_generate_contin_neighbor()
    {
        int distance = 3;
        int depth = 8;
        int rand_seed = clock();
        opencog::MT19937RandGen rng(rand_seed);
        field_set fs(field_set::contin_spec(0.0,0.5,0.5,depth), 4);
        eda::instance inst(fs.packed_width());
        eda::randomize(fs, inst, rng);
        
        eda::instance new_inst(inst);
        
        eda::field_set::contin_iterator it = fs.begin_contin(inst) + rng.randint(4);
        cout << "before generate:" << fs.stream_raw(inst) << endl;
        moses::generate_contin_neighbor(fs, new_inst, it, distance, rng);
        cout << "after generate:" << fs.stream_raw(new_inst) << endl;
        
        int new_dist = fs.hamming_distance(inst, new_inst);
        
        TS_ASSERT(distance == new_dist);        
    }
    
    void DISABLEtest_vary_n_knobs()
    {
        int distance = 2;
        arity_t arity = 8;
        size_t size = 5;
        field_set fs(field_set::disc_spec(arity), size);
        eda::instance_set<moses::combo_tree_score>  deme(1000,fs);
        eda::instance center_inst(fs.packed_width());
        int rand_seed = clock();
        opencog::MT19937RandGen rng(rand_seed);
        eda::randomize(fs, center_inst,rng); 
        cout << "center_inst:\n" << fs.stream(center_inst)  << endl;
        eda::instance_set<moses::combo_tree_score>::iterator out = deme.begin();
        moses::vary_n_knobs(deme.fields(), center_inst, distance, 0, out);
        //cout << "after vary knobs:" << endl;
        //foreach (eda::instance& inst, deme) {
        // cout <<fs.stream(inst) << endl;*/
        //}
        size_t generated_size = 0;
        int generated_max_distance = 0;
        int generated_min_distance = 0;
        
        get_sample_size_and_distance(deme, generated_size, 
                                     generated_max_distance,
                                     generated_min_distance,
                                     center_inst);
        // cout << generated_size << " " << generated_max_distance
        //  << " " << generated_min_distance <<endl;
        size_t total_size = total_number_of_neighbors(distance, size, arity);
        // cout << "total_size :" << total_size <<endl;
        TS_ASSERT(generated_size == total_size);
        TS_ASSERT(generated_max_distance == distance);
        TS_ASSERT(generated_min_distance == distance);
    }
    
    void DISABLEtest_vary_n_knobs_contin()
    {
        int dist  = 2;
        size_t size = 5;
        field_set fs(field_set::contin_spec(0.0, 0.5, 0.5,4),size);
        eda::instance_set<moses::combo_tree_score> deme(1000,fs);
        eda::instance center_inst(fs.packed_width());
        opencog::MT19937RandGen rng(1);
        eda::randomize(fs, center_inst, rng);
        
        eda::instance_set<moses::combo_tree_score>::iterator out = deme.begin();
        moses::vary_n_knobs(deme.fields(), center_inst, dist, 0, out);
        
        //@todo: add TS_ASSERT
    }
};
