/*
 * opencog/tests/learning/dimensionalembedding/DimEmbedUTest.cxxtest
 *
 * Copyright (C) 2010 by Singularity Institute for Artificial Intelligence
 * All Rights Reserved
 *
 * Written by David Crane <dncrane@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>

#include <opencog/learning/dimensionalembedding/DimEmbedModule.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atomspace/Node.h>
#include <opencog/atomspace/SimpleTruthValue.h>

using namespace opencog;

class DimEmbedTestSuite : public CxxTest::TestSuite
{
public:
    void link(AtomSpace* as, Handle h1, Handle h2,
              double strength, double confidence) {
        as->addLink(SIMILARITY_LINK, h1, h2,
                    SimpleTruthValue(strength, SimpleTruthValue::confidenceToCount(confidence)));
    }
    void testMisc() {
        AtomSpace *atomSpace = new AtomSpace();
        DimEmbedModule dimEmbed=DimEmbedModule(atomSpace);
        
        Handle h1 = atomSpace->addNode(CONCEPT_NODE, "dog1", SimpleTruthValue(0.001f, 0.00001f));
        Handle h2 = atomSpace->addNode(CONCEPT_NODE, "dog2", SimpleTruthValue(0.001f, 0.00001f));
        Handle h3 = atomSpace->addNode(CONCEPT_NODE, "dog3", SimpleTruthValue(0.001f, 0.00001f));
        Handle h4 = atomSpace->addNode(CONCEPT_NODE, "dog4", SimpleTruthValue(0.001f, 0.00001f));

        link(atomSpace, h1, h2, 0.5, 1.0);
        link(atomSpace, h1, h3, 0.7, 1.0);
        link(atomSpace, h1, h4, 1.0, 0.9);
        link(atomSpace, h3, h4, 0.2, 1.0);
        link(atomSpace, h2, h3, 0.2, 1.0);
                
        dimEmbed.embedAtomSpace(SIMILARITY_LINK, 4);
        //dimEmbed.logAtomEmbedding(SIMILARITY_LINK);
        //We have no guarantee on the order that the pivots
        //were picked in, but since numDimensions=numNodes,
        //the euclidean distances between any 2 nodes
        //will not be affected by this.
        //So the embedding vectors should be some permutation of...
        //h1:(1, .5, .7, .9)
        //h2:(.5, 1, .35, .45)
        //h3:(.7, .35, 1, .63)
        //h4:(.9, .45, .63, 1)
        Handle handles[4] = {h1, h2, h3, h4};
        //Pre-calculated distances based on what the embedding should be...
        double dists [4][4] = //dists[i-1][j-1]=distance between hi and hj
            {{0.0, 0.908295106229, 0.524785670536, 0.165529453572},
             {0.90829510622924747, 0.0, 0.95781000203589439, 0.9183681179135087},
             {0.52478567053607716, 0.95781000203589439, 0.0, 0.5690342696182717},
             {0.16552945357246843, 0.9183681179135087, 0.56903426961827175, 0.0}
            };
        double dist;
        for(int i=0;i<4;i++){
            for(int j=0;j<4;j++){
                dist = dimEmbed.euclidDist(handles[i],
                                           handles[j]
                                           ,SIMILARITY_LINK);
                TS_ASSERT_DELTA(dist,dists[i][j],.000001);
            }
        }
        
        Handle h5 = atomSpace->addNode(CONCEPT_NODE, "dog5", SimpleTruthValue(0.001f, 0.00001f));
        atomSpace->addLink(SIMILARITY_LINK, h1, h5,
                           SimpleTruthValue(0.5, SimpleTruthValue::confidenceToCount(1.0)));
        atomSpace->addLink(SIMILARITY_LINK, h3, h5,
                           SimpleTruthValue(0.6, SimpleTruthValue::confidenceToCount(1.0)));
        //dimEmbed.addNode(h5,SIMILARITY_LINK);
        //h1:(1, .5, .7, .9)
        //h3:(.7, .35, 1, .63)
        //So h5 should be some permutation of
        //h5:(.5, .25, .6, .45)
        //so we know what its distance from the others should be
        
        //std::cout << "h5Embed: ";
        //std::vector<double> h5Embed =
        //    dimEmbed.getEmbedVector(h5,SIMILARITY_LINK);
        //for(int i=0;i<h5Embed.size();i++) {
        //    std::cout << h5Embed[i] << " ";
        //} 
        
        
        TS_ASSERT_DELTA(dimEmbed.euclidDist(h5,h1,SIMILARITY_LINK),
                        0.72456883,
                        .000001);
        TS_ASSERT_DELTA(dimEmbed.euclidDist(h5,h2,SIMILARITY_LINK),
                        0.79056941,
                        .000001);
        TS_ASSERT_DELTA(dimEmbed.euclidDist(h5,h3,SIMILARITY_LINK),
                        0.49234134,
                        .000001);
        TS_ASSERT_DELTA(dimEmbed.euclidDist(h5,h4,SIMILARITY_LINK),
                        0.70950687,
                        .000001);
        delete atomSpace;
    }
    void testEmbed() {
        AtomSpace *atomSpace = new AtomSpace();
        DimEmbedModule dimEmbed=DimEmbedModule(atomSpace);
        
        Handle h1 = atomSpace->addNode(CONCEPT_NODE, "1", SimpleTruthValue(0.001f, 0.00001f));
        Handle h2 = atomSpace->addNode(CONCEPT_NODE, "2", SimpleTruthValue(0.001f, 0.00001f));
        Handle h3 = atomSpace->addNode(CONCEPT_NODE, "3", SimpleTruthValue(0.001f, 0.00001f));
        Handle h4 = atomSpace->addNode(CONCEPT_NODE, "4", SimpleTruthValue(0.001f, 0.00001f));
        Handle h5 = atomSpace->addNode(CONCEPT_NODE, "5", SimpleTruthValue(0.001f, 0.00001f));
        Handle h6 = atomSpace->addNode(CONCEPT_NODE, "6", SimpleTruthValue(0.001f, 0.00001f));
        Handle h7 = atomSpace->addNode(CONCEPT_NODE, "7", SimpleTruthValue(0.001f, 0.00001f));
        
        link(atomSpace, h1, h2, 0.5, 1.0);
        link(atomSpace, h1, h3, 0.5, 0.6);
        link(atomSpace, h1, h4, 1.0, 0.7);
        link(atomSpace, h1, h7, 1.0, 0.1);
        link(atomSpace, h2, h4, 0.95, 1.0);
        link(atomSpace, h2, h2, 0.31, 1.0);
        link(atomSpace, h2, h3, 1.0, 1.0);
        link(atomSpace, h2, h5, .95, 1.0);
        link(atomSpace, h3, h7, 0.8, 1.0);
        link(atomSpace, h3, h3, 0.51, 1.0);
        link(atomSpace, h4, h5, 0.9, 1.0);
        link(atomSpace, h5, h6, 0.2, 1.0);
        link(atomSpace, h5, h7, 0.02, 1.0);
        link(atomSpace, h6, h7, 0.4, 1.0);

        Handle handles[7] = {h1, h2, h3, h4, h5, h6, h7};
        dimEmbed.embedAtomSpace(SIMILARITY_LINK, 7);
        TS_ASSERT(dimEmbed.isEmbedded(SIMILARITY_LINK));
        //Every node is a pivot, so every node should be nondisposable
        for(int i=0;i<7;i++) {
            TS_ASSERT(atomSpace->getVLTI(handles[i])
                      !=AttentionValue::DISPOSABLE);
        }
        //Throw in a few nodes and links after embedding to make sure the
        //functions we're testing are robust against nodes added after
        //embedding. These atoms should't affect the embedding at all
        //unless we call dimEmbed.addNode(...) or we re-embed the atomspace.

        
        //dimEmbed.logAtomEmbedding(SIMILARITY_LINK);
        //We have no guarantee on the order that the pivots
        //were picked in, but since numDimensions=numNodes,
        //the euclidean distances between any 2 nodes
        //will not be affected by this.
        //So the embedding vectors should be some permutation of...
        //h1: 1.0, 0.66, 0.66, 0.7, 0.63, 0.21, 0.53
        //h2: 0.66, 1.0, 1.0, 0.95, 0.95, 0.32, 0.8
        //h3: 0.66, 1.0, 1.0, 0.95, 0.95, 0.32, 0.8
        //h4: 0.7, 0.95, 0.95, 1.0, 0.90, 0.30, 0.76
        //h5: 0.63, 0.95, 0.95, 0.90, 1.0, 0.30, 0.76
        //h6: 0.21, 0.32, 0.32, 0.30, 0.30, 1.0, 0.4
        //h7: 0.53, 0.8, 0.8, 0.76, 0.76, 0.4, 1.0
        
        //Pre-calculated distances based on what the embedding should be...
        double dists [7][7] = //dists[i-1][j-1]=distance between hi and hj
            {{0.0, 0.764050, 0.764050, 0.68996, 0.731419, 1.326302, 0.7277292},
             {0.764050, 0.0, 0.0, 0.1133015, 0.112773, 1.60820, 0.4650688},
             {0.764050, 0.0, 0.0, 0.11330158, 0.112773, 1.608202, 0.465068},
             {0.689968, 0.113301, 0.1133015, 0.0, 0.153852, 1.577275, 0.466847},
             {0.731419, 0.112773, 0.1127732, 0.153852, 0.0, 1.55754, 0.446847},
             {1.326302, 1.608202, 1.608202, 1.577275, 1.557547, 0.0, 1.303288},
             {0.727729, 0.4650688, 0.465068, 0.466847, 0.446847, 1.303288, 0.0}
            };
        
        double dist;
        for(int i=0;i<7;i++){
            for(int j=0;j<7;j++){
                dist = dimEmbed.euclidDist(handles[i],
                                           handles[j]
                                           ,SIMILARITY_LINK);
                TS_ASSERT_DELTA(dist,dists[i][j],.00001);
            }
        }
        //Tests for the k-nearest-neighbor functionality...
        //In order from nearest-to-h1 to farthest-from-h1, we have
        //h1,h4,h7,h5,h2=h3,h6
        Handle h1NN[7] = {h1,h4,h7,h5,h2,h3,h6};
        for(int i=0;i<7;i++) {
            if(i==4) continue;//We don't know whether it'd return h2 or h3,
                              //but either would be correct...
            HandleSeq kNN=dimEmbed.kNearestNeighbors(h1,SIMILARITY_LINK,i+1);
            TS_ASSERT_EQUALS(kNN.size(),i+1);
            for(int j=0;j<i+1;j++) {
                bool found=false;
                for(HandleSeq::iterator it=kNN.begin();it!=kNN.end();it++) {
                    if(*it==h1NN[j]) found=true;
                }
                TS_ASSERT(found);
            }
        }
        //In order from nearest-to-h7 to farthest-from-h7, we have
        //h7,h5,h2=h3,h4,h1,h6
        Handle h7NN[7] = {h7,h5,h2,h3,h4,h1,h6};
        for(int i=0;i<7;i++) {
            if(i==2) continue;//We don't know whether it'd return h2 or h3,
                              //but either would be correct...
            HandleSeq kNN=dimEmbed.kNearestNeighbors(h7,SIMILARITY_LINK,i+1);
            TS_ASSERT_EQUALS(kNN.size(),i+1);
            //std::cout << i+1 << " NN.\n";
            for(int j=0;j<i+1;j++) {
                bool found=false;
                //std::cout << "looking for: " << atomSpace->atomAsString(h7NN[j]) << "\n";
                for(HandleSeq::iterator it=kNN.begin();it!=kNN.end();it++) {
                    //std::cout << atomSpace->atomAsString(*it) << "\n";
                    if(*it==h7NN[j]) found=true;
                }
                TS_ASSERT(found);
            }
        }
        //Test the separation and homogeneity functions on a few clusters
        HandleSeq cluster1,cluster2,cluster3;
        cluster1.push_back(h1);cluster1.push_back(h2);cluster1.push_back(h3);
        cluster2.push_back(h4);cluster2.push_back(h5);
        cluster3.push_back(h6);cluster3.push_back(h7);
        HandleSeq cluster4(handles,handles+7);//cluster of all 7 nodes
        
        /* Homogeneity is calculated as 1/(1+A) where A is the mean of
         * the distances of all members of the cluster to their nearest
         * clustermates.
         */
        //For cluster1, A=(.764050+0.0+0.0)/3.0=0.254683333
        //so homogeneity=1/(1+0.254683333)=0.797013855
        TS_ASSERT_DELTA(0.7970138,
                        dimEmbed.homogeneity(cluster1,SIMILARITY_LINK),.00001);
        //For cluster2, A=(0.153852+0.153852)/2.0, so h=0.8666622
        TS_ASSERT_DELTA(0.8666622,
                        dimEmbed.homogeneity(cluster2,SIMILARITY_LINK),.00001);
        //For cluster3, A=(1.303288+1.303288)/2.0, so h=0.4341619
        TS_ASSERT_DELTA(0.4341619,
                        dimEmbed.homogeneity(cluster3,SIMILARITY_LINK),.00001);
        //For cluster4,A=(0.68996+0.0+0.0+0.113301+0.112773+1.303288+0.446847)/7
        //so h=0.724175
        TS_ASSERT_DELTA(0.7241752,
                        dimEmbed.homogeneity(cluster4,SIMILARITY_LINK),.00001);

        //Separation is the minimum distance from any given member of the
        //cluster to elements outside the cluster.
        TS_ASSERT_DELTA(0.112773,
                        dimEmbed.separation(cluster1,SIMILARITY_LINK),.00001);
        TS_ASSERT_DELTA(0.112773,
                        dimEmbed.separation(cluster2,SIMILARITY_LINK),.00001);
        TS_ASSERT_DELTA(0.446847,
                        dimEmbed.separation(cluster3,SIMILARITY_LINK),.00001);
        TS_ASSERT_DELTA(DBL_MAX,
                        dimEmbed.separation(cluster4,SIMILARITY_LINK),.00001);

        dimEmbed.clearEmbedding(SIMILARITY_LINK);
        //We cleared the embedding, so the VLTI of each pivot should be back
        //to normal
        for(int i=0;i<7;i++) {
            TS_ASSERT(atomSpace->getVLTI(handles[i])
                      ==AttentionValue::DISPOSABLE);
        }
        delete atomSpace;
    }
    void testCluster() {
        AtomSpace *atomSpace = new AtomSpace();
        DimEmbedModule dimEmbed=DimEmbedModule(atomSpace);
        
        Handle h1 = atomSpace->addNode(CONCEPT_NODE, "1", SimpleTruthValue(0.001f, 0.00001f));
        Handle h2 = atomSpace->addNode(CONCEPT_NODE, "2", SimpleTruthValue(0.001f, 0.00001f));
        Handle h3 = atomSpace->addNode(CONCEPT_NODE, "3", SimpleTruthValue(0.001f, 0.00001f));
        Handle h4 = atomSpace->addNode(CONCEPT_NODE, "4", SimpleTruthValue(0.001f, 0.00001f));
        Handle h5 = atomSpace->addNode(CONCEPT_NODE, "5", SimpleTruthValue(0.001f, 0.00001f));
        Handle h6 = atomSpace->addNode(CONCEPT_NODE, "6", SimpleTruthValue(0.001f, 0.00001f));
        Handle h7 = atomSpace->addNode(CONCEPT_NODE, "7", SimpleTruthValue(0.001f, 0.00001f));
        Handle h8 = atomSpace->addNode(CONCEPT_NODE, "8", SimpleTruthValue(0.001f, 0.00001f));

        link(atomSpace, h1, h2, 0.8, 1.0);
        link(atomSpace, h1, h3, 0.8, 1.0);
        link(atomSpace, h2, h3, 0.8, 1.0);
        link(atomSpace, h7, h8, 1.0, 1.0);
        link(atomSpace, h4, h5, 0.9, 1.0);
        link(atomSpace, h4, h6, 0.9, 1.0);
        link(atomSpace, h5, h6, 0.8, 1.0);
        link(atomSpace, h1, h7, 0.1, 1.0);
        link(atomSpace, h1, h8, 0.1, 1.0);
        link(atomSpace, h2, h7, 0.1, 1.0);
        link(atomSpace, h2, h4, 0.2, 1.0);
        link(atomSpace, h3, h4, 0.2, 1.0);
        link(atomSpace, h3, h6, 0.2, 1.0);
        link(atomSpace, h4, h7, 0.1, 1.0);
        link(atomSpace, h4, h8, 0.1, 1.0);
        
        dimEmbed.embedAtomSpace(SIMILARITY_LINK, 8);
        //dimEmbed.logAtomEmbedding(SIMILARITY_LINK);
        //there are 3 clear clusters: (h1,h2,h3),(h4,h5,h6), and (h7,h8)
        //We have no guarantee on the order that the pivots
        //were picked in, but since numDimensions=numNodes,
        //the euclidean distances between any 2 nodes
        //will not be affected by this.
        //So the embedding vectors should be some permutation of...
        //h1:1, 0.8, 0.8, 0.16, 0.144, 0.16, 0.1, 0.1
        //h2:0.8, 1, 0.8, 0.2, 0.18, 0.18, 0.1, 0.1
        //h3:0.8, 0.8, 1, 0.2, 0.18, 0.2, 0.08, 0.08
        //h4:0.16, 0.2, 0.2, 1, 0.9, 0.9, 0.1, 0.1
        //h5:0.144, 0.18, 0.18, 0.9, 1, 0.81, 0.09, 0.09
        //h6:0.16, 0.18, 0.2, 0.9, 0.81, 1, 0.09, 0.09
        //h7:0.1, 0.1, 0.08, 0.1, 0.09, 0.09, 1, 1
        //h8:0.1, 0.1, 0.08, 0.1, 0.09, 0.09, 1, 1
        Handle handles[8] = {h1, h2, h3, h4, h5, h6, h7, h8};
        //Pre-calculated distances based on what the embedding should be...
        double dists [8][8] = //dists[i-1][j-1]=distance between hi and hj
         {{0.0, 0.28861, 0.29205, 1.80286, 1.79013, 1.77396, 1.85736, 1.85736},
          {0.28861, 0.0, 0.28495, 1.75681, 1.74546, 1.73248, 1.86134, 1.86134},
          {0.29205, 0.28495, 0.0, 1.74894, 1.73834, 1.72078, 1.88398, 1.88398},
          {1.80286, 1.75681, 1.74894, 0.0, 0.17133, 0.16941, 1.94170, 1.94170},
          {1.79013, 1.74546, 1.73834, 0.17133, 0.0, 0.26991, 1.91338, 1.91338},
          {1.77396, 1.73248, 1.72078, 0.16941, 0.26991, 0.0, 1.91496, 1.91496},
          {1.85736, 1.86134, 1.88398, 1.94170, 1.91338, 1.91496, 0.0, 0.0},
          {1.85736, 1.86134, 1.88398, 1.94170, 1.91338, 1.91496, 0.0, 0.0}};
        //just to ensure that the embedding functionality is working...
        double dist;
        for(int i=0;i<8;i++){
            for(int j=0;j<8;j++){
                dist = dimEmbed.euclidDist(handles[i],
                                           handles[j],
                                           SIMILARITY_LINK);
                TS_ASSERT_DELTA(dist,dists[i][j],.00001);
            }
        }

        //Small problem: even though I tried to make the clusters
        //"obvious", sometimes kMeansCluster won't make the predicted clusters
        //even when functioning properly. So I gotta fix this test.
        /*
        typedef std::vector<std::pair<HandleSeq,std::vector<double> > >
            ClusterSeq;
        ClusterSeq clusters = dimEmbed.kMeansCluster(SIMILARITY_LINK, 3);
        
        double cent78 [8] = //centroid of (h7,h8) cluster
            {0.1, 0.1, 0.08, 0.1, 0.09, 0.09, 1, 1};
        double cent123 [8] = //centroid of (h1,h2,h3) cluster
            {0.86666, 0.86666, 0.86666, 0.18666, 0.168, 0.18, 0.09333, 0.09333};
        double cent456 [8] = //centroid of (h4,h5,h6) cluster
            {0.15466, 0.18666, 0.19333, 0.93333, 0.90333, 0.90333, 0.09333, 0.09333};
        double zero [8] = {0,0,0,0,0,0,0,0};
        std::vector<double> zeroes(8,0);
        //This is pretty ugly, but it's just checking that kMeansCluster
        //returned the 3 obvious clusters ((h1,h2,h3),(h4,h5,h6), and (h7,h8)
        //and that their centroids are correct.
        for(ClusterSeq::iterator it=clusters.begin();it!=clusters.end();it++) {
            HandleSeq clust = it->first;
            for(HandleSeq::iterator it2=clust.begin();it2!=clust.end();it2++) {
                std::cout << atomSpace->atomAsString(*it2) << "\n";
            } std::cout << "\n\n";
            std::vector<double> centroid = it->second;
            if(clust.size()==2) {//it should be the (7,8) cluster
                TS_ASSERT((clust[0]==h7 && clust[1]==h8) ||
                          (clust[0]==h8 && clust[1]==h7));
                for(int i=0;i<8;i++) {
                    //we don't know the order of the pivots, so we have
                    //to check the centroids another way...
                    //TS_ASSERT_DELTA(centroid[i],cent78[i],.00001);
                    double dist1 = dimEmbed.euclidDist(centroid,zeroes);
                    double dist2 = dimEmbed.euclidDist(cent78,zero,8);
                    TS_ASSERT_DELTA(dist1,dist2,.0001);
                }
            } else {
                TS_ASSERT(clust.size()==3);
                if(clust[0]==h1 || clust[0]==h2 || clust[0]==h3) {
                    TS_ASSERT((clust[0]==h1 && clust[1]==h2 && clust[2]==h3) ||
                              (clust[0]==h1 && clust[1]==h3 && clust[2]==h2) ||
                              (clust[0]==h2 && clust[1]==h1 && clust[2]==h3) ||
                              (clust[0]==h2 && clust[1]==h3 && clust[2]==h1) ||
                              (clust[0]==h3 && clust[1]==h2 && clust[2]==h1) ||
                              (clust[0]==h3 && clust[1]==h1 && clust[2]==h2));
                    for(int i=0;i<8;i++) {
                        double dist1 = dimEmbed.euclidDist(centroid,zeroes);
                        double dist2 = dimEmbed.euclidDist(cent123,zero,8);
                        TS_ASSERT_DELTA(dist1,dist2,.0001);
                        //TS_ASSERT_DELTA(centroid[i],cent123[i],.00001);    
                    }
                } else {
                    TS_ASSERT((clust[0]==h4 && clust[1]==h5 && clust[2]==h6) ||
                              (clust[0]==h4 && clust[1]==h6 && clust[2]==h5) ||
                              (clust[0]==h5 && clust[1]==h4 && clust[2]==h6) ||
                              (clust[0]==h5 && clust[1]==h6 && clust[2]==h4) ||
                              (clust[0]==h6 && clust[1]==h5 && clust[2]==h4) ||
                              (clust[0]==h6 && clust[1]==h4 && clust[2]==h5));
                    for(int i=0;i<8;i++) {
                        double dist1 = dimEmbed.euclidDist(centroid,zeroes);
                        double dist2 = dimEmbed.euclidDist(cent456,zero,8);
                        TS_ASSERT_DELTA(dist1,dist2,.0001);
                        //TS_ASSERT_DELTA(centroid[i],cent456[i],.00001);    
                    }
                }
            }
            }      */
        delete atomSpace;
    }
};
