/**
 * RunningBuiltInProcedureUTest.cxxtest
 *
 * Author: Welter Luigi
 * Copyright(c), 2007
 */
#include "RunningBuiltInProcedure.h"
#include "ActionPlanSenderMock.h"
#include "PetInterfaceMock.h"
#include "PetActionSchema.h"
#include "EmbodimentConfig.h"

using namespace Procedure;
using namespace PerceptionActionInterface;
using namespace Control;
using namespace opencog;

class RunningBuiltInProcedureUTest :  public CxxTest::TestSuite
{

public:
    RunningBuiltInProcedureUTest() {
        config(EmbodimentConfig::embodimentCreateInstance, true);
    }

    ~RunningBuiltInProcedureUTest() {
    }

    void setUp() {
    }

    void tearDown() {
    }

    void testOk() {
        AtomSpace as;

        std::list<ActionPlan> plans;
        OKActionPlanSender ap(plans);
        PetInterfaceMock pi;
        PAI pai(as, ap, pi);
        pi.setPAI(&pai);
        std::vector<combo::vertex> arguments;
        PetActionSchema p(pai, ActionType::BARK());
        RunningBuiltInProcedure rbp(pai, p, arguments);
        TS_ASSERT(!rbp.isFinished());
        TS_ASSERT(!rbp.isFailed());
        rbp.run();
#if 0 // TODO: Add a pai.processPVPMessage(<action status message>) to make the procecure be marked as finished     
        TS_ASSERT(rbp.isFinished());
        TS_ASSERT(!rbp.isFailed());
        combo::vertex result = rbp.getResult();
        //cout << "result = '" << result << "'" << endl;
        TS_ASSERT(get<ActionPlanID>(&result));
        TS_ASSERT(get<ActionPlanID>(result) == "0");
        TS_ASSERT(!plans.empty());
        TS_ASSERT(plans.front().getAction(1).getType() == ActionType::BARK());
#endif
    }

    void testFailure() {
        AtomSpace as;

        FailureActionPlanSender ap;
        PetInterfaceMock pi;
        PAI pai(as, ap, pi);
        pi.setPAI(&pai);
        PetActionSchema p(pai, ActionType::BARK());
        std::vector<combo::vertex> arguments;
        RunningBuiltInProcedure rbp(pai, p, arguments);
        TS_ASSERT(!rbp.isFinished());
        TS_ASSERT(!rbp.isFailed());
        rbp.run();
        TS_ASSERT(rbp.isFinished());
        TS_ASSERT(rbp.isFailed());
        combo::vertex result = rbp.getResult();
        //cout << "result = '" << result << "'" << endl;
        TS_ASSERT(get<combo::id::builtin>(&result));
        TS_ASSERT(get<combo::id::builtin>(result) == combo::id::null_vertex);
    }

};
