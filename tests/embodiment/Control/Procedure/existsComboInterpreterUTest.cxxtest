/**
 * existsComboInterpreterUTest.cxxtest
 *
 * Author: Elvys Borges
 * Copyright(c), 2007
 */

#include "ComboInterpreterUTest.h"
#include <opencog/util/mt19937ar.h>
#include <opencog/embodiment/PetComboVocabulary/PetComboVocabulary.h>

using namespace PerceptionActionInterface;
using namespace PetCombo;
using namespace std;

class existsComboInterpreterUTest :  public CxxTest::TestSuite , ComboInterpreterUTest
{

private:
    opencog::RandGen* rng;

public :

    existsComboInterpreterUTest() {
        rng = new opencog::MT19937RandGen(0);
    }

    ~existsComboInterpreterUTest() {
        delete rng;
    }

    opencog::RandGen& getRandGen() {
        return *rng;
    }

    void testExistsEdible() {
        string str("exists_edible");
        runProcedureInCombo(str, id::logical_true);
    }

    void testExistsMovable() {
        string str("exists_movable");
        runProcedureInCombo(str, id::logical_true);
    }

    void testExistsPickupable() {
        string str("exists_pickupable");
        runProcedureInCombo(str, id::logical_true);
    }

    void testExistsDrinkable() {
        string str("exists_drinkable");
        runProcedureInCombo(str, id::logical_true);
    }

    void testExistsAvatar() {
        string str("exists_avatar");
        runProcedureInCombo(str, id::logical_true);
    }

    void testExistsPet() {
        string str("exists_pet");
        runProcedureInCombo(str, id::logical_true);
    }

    void testExistsSmall() {
        string str("exists_small");
        runProcedureInCombo(str, id::logical_true);
    }

    void testExistsMoving() {
        string str("exists_moving");
        runProcedureInCombo(str, id::logical_true);
    }

    void testExistsPooPlace() {
        string str("exists_poo_place");
        runProcedureInCombo(str, id::logical_true);
    }

    void testExistsPeePlace() {
        string str("exists_pee_place");
        runProcedureInCombo(str, id::logical_true);
    }

    void testExistsNoise() {
        string str("exists_noisy");
        runProcedureInCombo(str, id::logical_true);
    }


};


