#include "BE.h"
#include "BasicWorldProvider.h"
#include "atom_types_init.h"
#include "PredefinedProcedureNames.h"
#include "BDRetriever.h"

using namespace behavior;

class BEUTest : public CxxTest::TestSuite
{

private:

public:

    BEUTest () {
        opencog::atom_types_init::init();
    }

    //thist test tests overlapping actions, when this happens
    //BE::tempUpdateRec is supposed to modify the time interval
    //of the second action so that they do not overlap once
    //converted into behavior description
    void test_tempUpdateRec1() {
        AtomSpace as;

        string avatar_str = "Paul";
        string pet_str = "Fido";
        string action1_str = "action1";
        string action2_str = "action2";
        string action3_str = "action3";
        string trick_str = "trick";

        unsigned long tl1 = 100;
        unsigned long tu1 = 250;
        unsigned long tl2 = 200;
        unsigned long tu2 = 300;
        unsigned long tl3 = 400;
        unsigned long tu3 = 400;

        //fill atomSpace

        Handle avatar_h = as.addNode(SL_AVATAR_NODE, avatar_str);
        Handle action1_h = as.addNode(GROUNDED_SCHEMA_NODE, action1_str);
        Handle action2_h = as.addNode(GROUNDED_SCHEMA_NODE, action2_str);
        Handle action3_h = as.addNode(GROUNDED_SCHEMA_NODE, action3_str);
        Handle actionDone_h = as.addNode(PREDICATE_NODE, ACTION_DONE_PREDICATE_NAME);
        Handle trick_h = as.addNode(CONCEPT_NODE, trick_str);

        //WARNING : TO CHANGE AFTER INSTALLING THE NEW LIBATOMSPACE
        atom_tree* action1_at = makeVirtualAtom(EVALUATION_LINK,
                                                makeVirtualAtom(actionDone_h, NULL),
                                                makeVirtualAtom(LIST_LINK,
                                                                makeVirtualAtom(avatar_h, NULL),
                                                                makeVirtualAtom(action1_h, NULL),
                                                                NULL),
                                                NULL);

        atom_tree* action2_at = makeVirtualAtom(EVALUATION_LINK,
                                                makeVirtualAtom(actionDone_h, NULL),
                                                makeVirtualAtom(LIST_LINK,
                                                                makeVirtualAtom(avatar_h, NULL),
                                                                makeVirtualAtom(action2_h, NULL),
                                                                NULL),
                                                NULL);

        atom_tree* action3_at = makeVirtualAtom(EVALUATION_LINK,
                                                makeVirtualAtom(actionDone_h, NULL),
                                                makeVirtualAtom(LIST_LINK,
                                                                makeVirtualAtom(avatar_h, NULL),
                                                                makeVirtualAtom(action3_h, NULL),
                                                                NULL),
                                                NULL);

        Handle action1_eval_h = as.addAtom(*action1_at, TruthValue::DEFAULT_TV());
        Handle t1_h = as.addTimeInfo(action1_eval_h, Temporal(tl1, tu1));

        Handle action2_eval_h = as.addAtom(*action2_at, TruthValue::DEFAULT_TV());
        Handle t2_h = as.addTimeInfo(action2_eval_h, Temporal(tl2, tu2));

        Handle action3_eval_h = as.addAtom(*action3_at, TruthValue::DEFAULT_TV());
        Handle t3_h = as.addTimeInfo(action3_eval_h, Temporal(tl3, tu3));

        Temporal ex_temp(tl1, tu3);
        Handle tt_h = as.addTimeInfo(trick_h, ex_temp);

        //instantiate the behavior encoder
        BasicWorldProvider bwp(as);
        BehaviorEncoder be(&bwp, pet_str, tt_h, 1);
        atom_tree* actionTemplate =
            makeVirtualAtom(EVALUATION_LINK,
                            makeVirtualAtom(actionDone_h, NULL),
                            makeVirtualAtom(LIST_LINK,
                                            makeVirtualAtom(avatar_h, NULL),
                                            NULL),
                            NULL);
        be.addBETracker(*actionTemplate, new ActionBDTracker(&as));

        //check the result from the Behavior Encoder
        be.tempUpdateRec(ex_temp);

        CompositeBehaviorDescription bd;

        BDRetriever::retrieveExemplar(bd, bwp, trick_str, ex_temp);

        std::cout << "RETRIEVED BD : " << bd.toString() << std::endl;

        //build the expected cbd
        CompositeBehaviorDescription expected_bd;
        atom_tree* action1_beh_at =
            makeVirtualAtom(EVALUATION_LINK,
                            makeVirtualAtom(as.addNode(PREDICATE_NODE, BEHAVED_PREDICATE_NAME), NULL),
                            makeVirtualAtom(LIST_LINK,
                                            makeVirtualAtom(avatar_h, NULL),
                                            makeVirtualAtom(action1_h, NULL),
                                            NULL),
                            NULL);
        atom_tree* action2_beh_at =
            makeVirtualAtom(EVALUATION_LINK,
                            makeVirtualAtom(as.addNode(PREDICATE_NODE, BEHAVED_PREDICATE_NAME), NULL),
                            makeVirtualAtom(LIST_LINK,
                                            makeVirtualAtom(avatar_h, NULL),
                                            makeVirtualAtom(action2_h, NULL),
                                            NULL),
                            NULL);
        atom_tree* action3_beh_at =
            makeVirtualAtom(EVALUATION_LINK,
                            makeVirtualAtom(as.addNode(PREDICATE_NODE, BEHAVED_PREDICATE_NAME), NULL),
                            makeVirtualAtom(LIST_LINK,
                                            makeVirtualAtom(avatar_h, NULL),
                                            makeVirtualAtom(action3_h, NULL),
                                            NULL),
                            NULL);
        Handle action1_beh_h = as.addAtom(*action1_beh_at, TruthValue::DEFAULT_TV());
        Handle action2_beh_h = as.addAtom(*action2_beh_at, TruthValue::DEFAULT_TV());
        Handle action3_beh_h = as.addAtom(*action3_beh_at, TruthValue::DEFAULT_TV());

        expected_bd.addPredicate(action1_beh_h, tl1, tu1);
        expected_bd.addPredicate(action2_beh_h, tu1 + BehaviorEncoder::MinPauseTime, tu2);
        expected_bd.addPredicate(action3_beh_h, tl3, tu3 + BehaviorEncoder::MinActionTime);

        std::cout << "EXPECTED BD : " << expected_bd.toString() << std::endl;

        TS_ASSERT(bd.equals(expected_bd));
    }
};
