/**
 * RewardMessageUTest
 *
 * Author: Carlos Lopes
 * Copyright(c), 2007
 */
#include <RewardMessage.h>
#include <string.h>

using namespace LearningServerMessages;

static const std::string from  = "PET";
static const std::string to    = "LS";
static const std::string trick = "fetch";
static const double reward = -1.0;
static const std::string candidate = "do fetch";
static std::vector<std::string> trickArguments;

class RewardMessageUTest : public CxxTest::TestSuite
{

private:
    RewardMessage * rm;

public:

    RewardMessageUTest() {
        rm = new RewardMessage(from, to, trick, trickArguments, candidate, reward);
    }

    ~RewardMessageUTest() {
        delete(rm);
    }

    void testLoadPlainTextRepresentation() {
        RewardMessage rm2(from, to);

        rm2.loadPlainTextRepresentation(rm->getPlainTextRepresentation());
        TS_ASSERT(rm2.getSchema() == trick);
        TS_ASSERT_DELTA(rm2.getReward(), reward, 0.0001);
        TS_ASSERT(rm2.getCandidateSchema() == candidate);
    }

    void testGettersSetters() {
        rm->setSchema("rollOver");
        rm->setCandidateSchema("do roll over");
        rm->setReward(1.0);

        TS_ASSERT(rm->getSchema() == "rollOver");
        TS_ASSERT_DELTA(rm->getReward(), 1.0, 0.0001);
        TS_ASSERT(rm->getCandidateSchema() == "do roll over");
    }

    void setUp() {
    }

    void tearDown() {
    }

}; // class
