#include <cxxtest/TestSuite.h>
#include <string>
#include <sstream>
#include <iostream>

#include "BoundingBox.h"
#include "Dimension2.h"
#include "Dimension3.h"
#include "Face.h"
#include "Line.h"
#include "LineSegment.h"
#include "Matrix3.h"
#include "Matrix4.h"
#include "Plane.h"
#include "Quaternion.h"
#include "Rectangle.h"
#include "SquareFace.h"
#include "Triangle.h"
#include "Vector2.h"
#include "Vector3.h"
#include "Vector4.h"

#include "StaticEntity.h"
#include "SuperEntity.h"
#include "MovableEntity.h"
#include "PetAgent.h"
#include "HumanoidAgent.h"

#include "LocalSpaceMap2D.h"

using namespace Spatial;
using namespace Spatial::Math;

class MathUTest : public CxxTest::TestSuite {
public:

  void test_SuperEntity( ) {


      Math::Vector3 corners[] = { Math::Vector3( 10, 10, 0), Math::Vector3( 10, 4.76837e-07, 0),
                                  Math::Vector3(10, 4.76837e-07, 0), Math::Vector3( 5, 4.76837e-07, 0),
                                  Math::Vector3(-2.98023e-07, 4.76837e-07, 0), Math::Vector3( 2.98023e-07, 10, 0),
                                  Math::Vector3(2.98023e-07, 10, 0), Math::Vector3( 10, 10, 0),
                                  Math::Vector3(5, 4.76837e-07, 0), Math::Vector3( 5, -5, 0),
                                  Math::Vector3(5, -5, 0), Math::Vector3( -5, -5, 0),
                                  Math::Vector3(-5, -5, 0), Math::Vector3( -5, 5, 0) };
 

    EntityPtr petAgent( new PetAgent( 1244094484, "Fido", Vector3(5, 5, 0), Dimension3( 1, 1, 1 ), Quaternion( Vector3::Z_UNIT, 0 ), 0.25 ) );
    EntityPtr humanoidAgent( new HumanoidAgent( 1244094484, "Paul", Vector3(3.5, 3.5, 0), Dimension3( 1, 1, 1 ), Quaternion( Vector3::Z_UNIT, 0 ), 0.25 ) );



    EntityPtr s1( new StaticEntity( 1, "entity1", Vector3( 5, 5, 0 ), Dimension3( 10, 10, 10 ), Quaternion( Vector3::Z_UNIT, 0 ) ) );
    EntityPtr s2( new StaticEntity( 2, "entity2", Vector3( ), Dimension3( 10, 10, 10 ), Quaternion( Vector3::Z_UNIT, 0 ) ) );
    EntityPtr s3( new StaticEntity( 3, "entity3", Vector3( -5, -5 ), Dimension3( 10, 10, 10 ), Quaternion( Vector3::Z_UNIT, 0 ) ) );
    EntityPtr s4( new StaticEntity( 4, "entity4", Vector3( 5, 5, 0 ), Dimension3( 10, 10, 10 ), Quaternion( Vector3::Z_UNIT, 0 ) ) );
    EntityPtr s5( new StaticEntity( 5, "entity5", Vector3( 5, 5, 0 ), Dimension3( 20, 20, 20 ), Quaternion( Vector3::Z_UNIT, 0 ) ) );

//    EntityPtr s6( new StaticEntity( 6, "entity6", Vector3( 3, 3, 0 ), Dimension3( 1, 1, 1 ), Quaternion( Vector3::Z_UNIT, 0 ) ) );
//    EntityPtr s7( new StaticEntity( 7, "entity7", Vector3( 3, 3, 0 ), Dimension3( 1, 1, 1 ), Quaternion( Vector3::Z_UNIT, 0 ) ) );

    double petRadius = 0.25;
    double xMin = 0;
    double xMax = 256;
    double yMin = 0;
    double yMax = 256;
    unsigned int xDim = 1024;
    unsigned int yDim = 1024;
    Spatial::LocalSpaceMap2D map( xMin, xMax, xDim, yMin, yMax, yDim, petRadius );
//    try {
        map.addObject( "entity1", ObjectMetaData( 3.0, 3.0, 1, 1, 1, 0 ), true );
        map.addObject( "entity2", ObjectMetaData( 20.0, 20.0, 1, 1, 1, 0 ), true );
        map.addObject( "entity3", ObjectMetaData( 3.5, 3.5, 1, 1, 1, 0 ), true );
//    } catch( opencog::InvalidParamException& ex ) {
//        std::cout << ex.getMessage( ) << std::endl;
//    } // catch

    SuperEntity spe8( s1, s4 );
    
    TS_ASSERT_THROWS_ANYTHING( SuperEntity spe0( petAgent, humanoidAgent ) )

    
    SuperEntity spe( s1, s2 );
    spe.merge( s3 );
    
    spe.removeEntity( s3->getId( ) );
    
    const std::list<Math::LineSegment>& edges = spe.getEdges( );

    unsigned int cornersCounter = 0;
    std::list<Math::LineSegment>::const_iterator it;
    for( it = edges.begin( ); it != edges.end( ); ++it ) {
        //std::cout << it->toString( ) << std::endl;
        TS_ASSERT( ( corners[cornersCounter++] - it->pointA ).length( ) < Math::LineSegment::TOLERANCE_DISTANCE );
        TS_ASSERT( ( corners[cornersCounter++] - it->pointB ).length( ) < Math::LineSegment::TOLERANCE_DISTANCE );
    } // for


    SuperEntity spe1( s1, s2 );
    
    spe1.merge( s3 );      
    spe1.removeEntity( 3 );     
    
    SuperEntity spe2( s4, s5 );
    SuperEntity spe3( s1, s4 );


    TS_ASSERT( spe.getEdges( ).size( ) == spe1.getEdges( ).size( ) )      
    
  }

  void test_MathElements( ) {
    Vector3 p1( -1, 3, 2 );
    Vector3 p2( 1, 3, 2 );
    Vector3 p3( 0, 0, 0 );
    Vector3 p4( -1, -3, 2 );
    Vector3 p5( 1, -3, 2 );

    Vector2 vec2;
    Vector3 vec3;
    Vector4 vec4;
    Plane plane;
    Face face( p1, p2, p3 );

    Line line1( p1, p2 );
    LineSegment seg1( p2, p3 );
    LineSegment seg2( p1, p2 );
    LineSegment seg3( p1, p2 );
    TS_ASSERT( line1 == seg2 )
    TS_ASSERT( seg3 == seg2 )

    Rectangle rec1( p1, p2, p5 );
    SquareFace sqf1( p1, p2, p4, p5 );
    

    Quaternion quat( Vector3::X_UNIT, 0 );
    Triangle tri( p1, p2, p3 );
    Dimension2 dim2( 100, 200 );
    Dimension3 dim3( 100, 200, 300 );

    Vector3 up( 0, 1 );
    Vector3 front( 35000, -2000 );

    float agentFovReach = 2;
  
    Spatial::Math::Vector3 maximumPoint = front * agentFovReach;
    
    Spatial::Math::Line limitLine( Quaternion( Spatial::Math::Vector3::Z_UNIT, M_PI/2).rotate( front ) + maximumPoint, 
				   Quaternion( Spatial::Math::Vector3::Z_UNIT, -M_PI/2).rotate( front ) + maximumPoint );

    //std::cout << limitLine.toString( ) << std::endl;

  // agent fov will be 160 degrees
  Spatial::Math::Vector3 leftPoint = Quaternion( Spatial::Math::Vector3::Z_UNIT, 80*M_PI/180.0).rotate(front) * agentFovReach;
  Spatial::Math::Vector3 rightPoint = Quaternion( Spatial::Math::Vector3::Z_UNIT, -80*M_PI/180.0).rotate(front) * agentFovReach;

  Spatial::Math::Vector3 intersectionPoint;

  Spatial::Math::LineSegment rightLine( Spatial::Math::Vector3( 0,0 ), rightPoint );

  TS_ASSERT( limitLine.intersects( rightLine, &intersectionPoint ) )
    
  Quaternion rotation( Vector3::Z_UNIT, M_PI/2.0f  );
  Vector3 up3( rotation.rotate( Vector3::X_UNIT ) );
  
  TS_ASSERT( ( up3 - Vector3::Y_UNIT ).length( ) < 0.01 )

  Line limitLine2( Vector3( 4899.16, 38086.2, 0), Vector3( 4897.18, -38086.4, 0) );
  Line leftLine2( Vector3(0, 0, 0), Vector3( 38358.3, 11437.4, 0) );

  TS_ASSERT( limitLine2.intersects( leftLine2 ) )
        
  }

  void test_Entities( ) {
    StaticEntity se1( 1, "entity1", Vector3( ), Dimension3( 10, 10, 20 ), Quaternion( Vector3::X_UNIT, 0 ) );
    TS_ASSERT( se1.getType( ) == Entity::STATIC );    
    TS_ASSERT( se1.getBoundingBox().getAllCorners().size() == 8 )

    MovableEntity me1( 2, "entity2", Vector3( ), Dimension3( 10, 10, 20 ), Quaternion( Vector3::X_UNIT, 0 ) );
    TS_ASSERT( me1.getType( ) == Entity::MOVABLE );

    PetAgent pa1( 3, "agent1", Vector3( ), Dimension3( 10, 10, 20 ), Quaternion( Vector3::X_UNIT, 0 ) );
    TS_ASSERT( pa1.getType( ) == Entity::PET_AGENT );

    HumanoidAgent ha1( 4, "agent2", Vector3( ), Dimension3( 10, 10, 20 ), Quaternion( Vector3::X_UNIT, 0 ) );
    TS_ASSERT( ha1.getType( ) == Entity::HUMANOID_AGENT );
    
    Entity* humanoid = dynamic_cast<Entity*>( &ha1 );
    TS_ASSERT( humanoid->getType( ) == Entity::HUMANOID_AGENT );
    
    MovableEntity* movableEntity = dynamic_cast<MovableEntity*>( &ha1 );
    TS_ASSERT( movableEntity->getType( ) == Entity::HUMANOID_AGENT );


  }
};
