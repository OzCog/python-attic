/*
 * tests/scm/SCMPrimitive.cxxtest
 *
 * Make sure the scheme primtive extension code works
 * Copyright (C) 2009 Linas Vepstas <linasvepstas@gmail.com>
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */


#include <opencog/util/Logger.h>
#include <opencog/util/Config.h>

using namespace opencog;

class SCMPrimitive :  public CxxTest::TestSuite
{
	private:
		AtomSpace *as;
		SchemeEval &eval;

	public:

    SCMPrimitive(void) :
        eval(SchemeEval::instance())
    {
        try
        {
            config().load("opencog-test.conf");
        }
        catch (RuntimeException &e)
        {
            std::cerr << e.getMessage() << std::endl;
        }
        logger().setFilename(config()["LOG_FILE"]);
        logger().setLevel(Logger::getLevelFromString(config()["LOG_LEVEL"]));
        logger().setPrintToStdoutFlag(config().get_bool("LOG_TO_STDOUT"));
    }

    ~SCMPrimitive()
    {
        // erase the log file if no assertions failed
        if (!CxxTest::TestTracker::tracker().suiteFailed())
            std::remove(logger().getFilename().c_str());
    }

    void setUp(void);

    void tearDown(void) { }

    //Nodes
    void check_node(const char *, const char *, float, float);
    void test_single_atom(void);
    
    //Links
    void check_link(const char *, Type, const char *, const char *, const char *, const char *, float, float);
    void test_reference_link(void);
    void test_word_instance_link(void);
    void test_inheritance_link(void);
    //TODO
    //void test_evaluation_link(void);
 
    //Relex links
    void check_parse_link(const char *, Type, const char *, const char *, const char *, const char *, float, float);
    void check_frame_link(const char *, Type, const char *, const char *, const char *, const char *, float, float);  
    void test_parse_link(void);
    void test_lemma_link(void);
    void test_part_of_speech_link(void);   
    void test_frame_element_link(void);
};

/*
 * This is called once before each test, for each test (!!)
 */
void SCMPrimitive::setUp(void)
{
	CogServer& cogserver = static_cast<CogServer&>(server());
	as = cogserver.getAtomSpace();
}

// ============================================================

void SCMPrimitive::test_frame_element_link()
{

    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    check_frame_link("FrameElementLink", PARSE_LINK, "DefinedFrameNode", "DefinedFrameElementNode", 
                     "#Temporal_colocation", "#Temporal_colocation:Time", 0.0, 0.0);

    logger().debug("END TEST: %s", __FUNCTION__);
}
/* ============================= END OF FILE ================= */

/*
 * PrimitiveExample.cc
 *
 * Example code showing how declare a C++ method so that it can 
 * be called from scheme.
 *
 * Copyright (C) 2009 Linas Vepstas
 */


#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atomspace/Link.h>
#include <opencog/atomspace/Node.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemePrimitive.h>
#include <opencog/server/CogServer.h>

using namespace opencog;

// Some example class
class MyTestClass
{
	private:
		int id;  // some value in the instance
	public:

		MyTestClass(int _id) { id = _id; }

		// An example method -- accepts a handle, and wraps it 
		// with a ListLink.
		Handle my_func(Handle h)
		{
			Handle hlist = Handle::UNDEFINED;
			Atom *a = TLB::getAtom(h);
			Node *n = dynamic_cast<Node *>(a);
			if (n)
			{
				printf("Info: my_func instance %d received the node: %s\n", id, n->getName().c_str());
				CogServer& cogserver = static_cast<CogServer&>(server());
				AtomSpace *as = cogserver.getAtomSpace();
				hlist = as->addLink(LIST_LINK, h);
			}
			else
			{
				printf("Warning: my_func instance %d called with invalid handle\n", id);
			}
			return hlist;
		}
};

int main ()
{
	// Need to access the atomspace to get it to initialize itself.
	CogServer& cogserver = static_cast<CogServer&>(server());
	// AtomSpace *as = cogserver.getAtomSpace();
	cogserver.getAtomSpace();

	// Do this early, so that the scheme system is initialized.
	SchemeEval &eval = SchemeEval::instance();

	printf("\nInfo: Start creating a scheme call into C++\n");

	// Create the example class, and define a scheme function,
	// named "bingo", that will call one of its methods
	MyTestClass *mtc = new MyTestClass(42);
	declare("bingo", &MyTestClass::my_func, mtc);

	// Now, call bingo, with a reasonable argument. Since 
	// MyTestClass::my_func is expecting a handle, we better pass
	// bingo a handle.
	eval.eval("(define nnn (cog-new-node 'ConceptNode \"Hello World!\"))");
	std::string rslt = eval.eval("(bingo nnn)");
	if (eval.eval_error())
	{
		printf("Error: failed evaluation\n");
	}

	// Print the result of calling MyTestClass::my_func
	printf("Info: Result of scheme evaluation is %s", rslt.c_str());
	printf("Info: We are done, bye!\n");
	return  0;
}

/*
todo
-- update README
-- create test case
-- add nil's signature
-- port pln-bc over to this
-- kill AdHoc.cc
-- publish new README on wiki.

*/
