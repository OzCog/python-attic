/*
 * @file tests/planning/ActionTest.cxxtest
 *
 * Copyright (C) 2015-2016 OpenCog Foundation
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>

#include <opencog/util/Logger.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atoms/pattern/PatternLink.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/rule-engine/Rule.h>

#include <opencog/planning/Action.h>

using namespace opencog;

#define PLANNING_TEST_PATH PROJECT_SOURCE_DIR "/tests/planning"
#define CHKERR \
    TSM_ASSERT("Caught scm error during eval", \
        (false == _scm->eval_error()));

class ActionUTest : public CxxTest::TestSuite
{
private:
    AtomSpace* _as;
    SchemeEval* _scm;
public:
    ActionUTest(): _as(nullptr), _scm(nullptr)
    {
        logger().set_level(Logger::DEBUG);
        logger().set_print_level_flag(true);
        logger().set_print_to_stdout_flag(true);
    }

    ~ActionUTest()
    {
        // Clean Up
        delete _as;
        delete _scm;

        // Erase the log file if no assertions failed
        if (!CxxTest::TestTracker::tracker().suiteFailed())
            std::remove(logger().get_filename().c_str());
    }

    void setUp()
    {
        // The scheme environment is reset between each test.
        _as = new AtomSpace();
        _scm = new SchemeEval(_as);

        _scm->eval("(add-to-load-path \"/usr/local/share/opencog/scm\")");
        CHKERR
        _scm->eval("(use-modules (opencog))");
        CHKERR
        _scm->eval("(use-modules (opencog rule-engine))");
        CHKERR
    }

    void tearDown()
    {
        _as = nullptr;
        _scm = nullptr;
    }

    // Why this check? B/c PatternLink api's behavior might change.
    // What is being checked? That the derived rule doesn't have any form of
    // virtual-terms. This is necessary because the derived rule is used
    // during action selection and terms that might have side effect should
    // not exist in the derived rule, which maybe run multiple times during
    // the action-selection/planning/simulation.
    void test_constuctor() {
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        // Load test content
        _scm->eval("(load \"" PLANNING_TEST_PATH "/test-rbs.scm\")");
        CHKERR

        // Simple BindLink with an AndLink or SequentialAndLink
        Handle alias = _as->get_node(DEFINED_SCHEMA_NODE, "initial-rule"),
               rbs = _as->get_node(CONCEPT_NODE, "initial-rbs"),
               ml = _as->get_link(MEMBER_LINK, HandleSeq {alias, rbs});

        Rule rule(ml);
        Action action(rule);
        PatternLinkPtr p = PatternLinkCast(action.get_derived_state());

        if (p == nullptr)
            p = createPatternLink(*action.get_derived_state());

        TS_ASSERT_EQUALS(0, p->get_virtual().size());
    }
};
