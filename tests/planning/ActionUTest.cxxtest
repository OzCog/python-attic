/*
 * @file tests/planning/ActionTest.cxxtest
 * @author Amen Belayneh <amenbelayneh@gmail.com> November 2015
 *
 * Copyright (C) 2015 OpenCog Foundation
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>

#include <opencog/util/Logger.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/util/Config.h>
#include <opencog/guile/load-file.h>
#include <opencog/rule-engine/Rule.h>

#include <opencog/planning/Action.h>

using namespace opencog;

class ActionUTest : public CxxTest::TestSuite
{
private:
    AtomSpace _as;
    SchemeEval _scm;
public:
    ActionUTest() : _scm(&_as)
    {
        // Print output to standard
        logger().setLevel(Logger::DEBUG);
        logger().setPrintToStdoutFlag(true);
        logger().setPrintLevelFlag(true);
    }

    ~ActionUTest()
    {
        // erase the log file if no assertions failed
        //if (!CxxTest::TestTracker::tracker().suiteFailed())
        //    std::remove(logger().getFilename().c_str());
    }

    void setUp()
    {
        /* uncommenting seems to have no difference
        config().set("SCM_PRELOAD",
                     "opencog/atomspace/core_types.scm");
        load_scm_files_from_config(_as);
        */

        cout <<_scm.eval("(add-to-load-path \"/usr/local/share/opencog/scm\")");
        cout << _scm.eval("(use-modules (opencog) (opencog rule-engine))");
        cout << _scm.eval("(load \"test-rbs.scm\")");
    }


    // Why this check? B/c PatternLink api's behavior might change.
    // What is being checked? That the derived rule doesn't have any form of
    // virtual-terms.
    void test_constuctor() {
    /*
        cout << _scm.eval("(cog-prt-atomspace)");
        // Simple BindLink with an AndLink or SequentialAndLink
        Handle alias = _as.get_node(NODE, "initial-rule"),
               rbs = _as.get_node(CONCEPT_NODE, "initial-rbs"),
               ml = _as.get_link(MEMBER_LINK, HandleSeq {alias, rbs});
        Rule rule(ml);
        Action a(rule);

        TS_ASSERT_EQUALS(a.get_derived_rule()->get_virtual().size(), 0);
    */
    }
};
