/*
 * @file tests/planning/ActionSelectorUTest.cxxtest
 *
 * Copyright (C) 2016 OpenCog Foundation
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>

#include <opencog/atoms/pattern/PatternLink.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/rule-engine/Rule.h>
#include <opencog/util/Logger.h>

// Class being tested
#include <opencog/planning/ActionSelector.h>

using namespace opencog;

#define PLANNING_TEST_PATH PROJECT_SOURCE_DIR "/tests/planning"
#define CHKERR \
    TSM_ASSERT("Caught scm error during eval", \
        (false == _scm->eval_error()));

class ActionSelectorUTest : public CxxTest::TestSuite
{
private:
    AtomSpace* _as;
    SchemeEval* _scm;
public:
    ActionSelectorUTest(): _as(nullptr), _scm(nullptr)
    {
        logger().set_level(Logger::DEBUG);
        logger().set_print_level_flag(true);
        logger().set_print_to_stdout_flag(true);
    }

    ~ActionSelectorUTest()
    {
        // Clean Up
        delete _as;
        delete _scm;

        // Erase the log file if no assertions failed
        if (!CxxTest::TestTracker::tracker().suiteFailed())
            std::remove(logger().get_filename().c_str());
    }

    void setUp()
    {
        // The scheme environment is reset between each test.
        _as = new AtomSpace();
        _scm = new SchemeEval(_as);

        _scm->eval("(add-to-load-path \"/usr/local/share/opencog/scm\")");
        CHKERR
        _scm->eval("(use-modules (opencog))");
        CHKERR
        _scm->eval("(use-modules (opencog rule-engine))");
        CHKERR
    }

    void tearDown()
    {
        _as = nullptr;
        _scm = nullptr;
    }

    void test_constuctor()
    {
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        // Load test content
        _scm->eval("(load \"" PLANNING_TEST_PATH "/test-rbs.scm\")");
        CHKERR
        Handle rbs = _scm->eval_h("initial-rbs") ;
        CHKERR

        // Check if it detects invalid action-rulebases which is a URE
        // rulebase that has rules that are not action-rules.
        TS_ASSERT_THROWS({ActionSelector selector(*_as, rbs);},
            RuntimeException)

        // Make rule-2 an action
        _scm->eval("(convert-to-action-rule rule2-alias)");
        CHKERR

        // Check the number of action rules
        ActionSelector selector(*_as, rbs) ;
        TSM_ASSERT_EQUALS("Expected 3 action-rules",
            3, selector.get_actions().size());

        logger().info("END TEST: %s", __FUNCTION__);
    }

    void test_select_by_context()
    {
        logger().info("BEGIN TEST: %s", __FUNCTION__);

        // Load test content
        _scm->eval("(load \"" PLANNING_TEST_PATH "/test-rbs.scm\")");
        CHKERR
        Handle rbs = _scm->eval_h("initial-rbs") ;
        CHKERR

        // Make rule-2 an action
        _scm->eval("(convert-to-action-rule rule2-alias)");
        CHKERR
        ActionSelector selector(*_as, rbs);

        // There is no groundable content so there musn't be any selected rule.
        auto result_1 = selector.select_by_context();
        TSM_ASSERT_EQUALS("Expected no actions.", result_1.size(), 0);

        // Add groundable content
        _scm->eval("(add-groundable-content)");
        CHKERR
        auto result_2 = selector.select_by_context();
        TSM_ASSERT_EQUALS("Expected two actions.", result_2.size(), 2);

        // Check that the selected rules doesn't include rule-3
        auto rule_3_alias =_scm->eval_h("rule3-alias");
        CHKERR
        for (auto i : result_2) {
            TSM_ASSERT_DIFFERS("rule-3 shouldn't be selected", rule_3_alias, i);
        }

        logger().info("END TEST: %s", __FUNCTION__);
    }
};
