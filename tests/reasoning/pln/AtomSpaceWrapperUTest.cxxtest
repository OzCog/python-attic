/*
 * Copyright (C) 2002-2007 Novamente LLC
 * Copyright (C) 2008 by Singularity Institute for Artificial Intelligence
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/server/CogServer.h>
#include <opencog/atomspace/SimpleTruthValue.h>

#include <opencog/reasoning/pln/PLN.h>
#include <opencog/reasoning/pln/AtomSpaceWrapper.h>

using namespace opencog;
using namespace opencog::pln;
using namespace std;

#define GET_ASW ((AtomSpaceWrapper*) ASW())

/// @todo Check truth values and other functions in the AtomSpaceWrapper
class AtomSpaceWrapperUTest :  public CxxTest::TestSuite {
private:

    AtomSpaceWrapper* asw;

public:

    AtomSpaceWrapperUTest() {
        cout << "Initializing AtomSpaceWrapper test env...";

        // This access is required to initialise CogServer.
        CogServer& cogserver = static_cast<CogServer&>(server());

        // This is also necessary to make sure that the ASW is initialized
        // at the right time.
        asw = GET_ASW;
    }

    void setUp()
    {
    }
    
    void tearDown()
    {
        asw->reset();
    }


    void testAtomIdentity() {
        // Test atom identity works
        pHandle h1 = asw->addNode(FW_VARIABLE_NODE, "filler",
                SimpleTruthValue(0.001f,1.0f), false, false);
        pHandle h2 = asw->addNode(FW_VARIABLE_NODE, "filler",
                SimpleTruthValue(0.001f,1.0f), false, false);
        TS_ASSERT(h1 == h2);
        
        // Test with mananged == true
        pHandle h3 = asw->addNode(FW_VARIABLE_NODE, "filler",
                SimpleTruthValue(0.001f,1.0f), false, true);
        pHandle h4 = asw->addNode(FW_VARIABLE_NODE, "filler",
                SimpleTruthValue(0.001f,1.0f), false, true);
        TS_ASSERT(h3 == h4);
    }

    void testAddDuplicateNode() {
        SimpleTruthValue tv(0.8, 0.9);
        SimpleTruthValue tv2(0.4, 0.9);
        pHandle h1 = asw->addNode(CONCEPT_NODE, "test1", tv);
        pHandle h2 = asw->addNode(CONCEPT_NODE, "test2", tv);

        pHandle h3 = asw->addNode(CONCEPT_NODE, "test1", tv, true, true);
        pHandle h4 = asw->addNode(CONCEPT_NODE, "test2", tv, true, true);

        TS_ASSERT(h1 != h3);
        TS_ASSERT(h1 != h4);

        // Check that more than just one lot of duplicates can be stored
        pHandle h5 = asw->addNode(CONCEPT_NODE, "test1", tv, true, true);
        pHandle h6 = asw->addNode(CONCEPT_NODE, "test2", tv, true, true);
    
        TS_ASSERT(h5 != h3);
        TS_ASSERT(h6 != h4);
    }

    void testAddLinkWithNullVersionHandle() {
        SimpleTruthValue tv(0.8, 0.9);
        SimpleTruthValue tv2(0.4, 0.9);
        pHandle h1 = asw->addNode(CONCEPT_NODE, "test1", tv);
        pHandle h2 = asw->addNode(CONCEPT_NODE, "test2", tv);

        pHandleSeq outgoing;
        outgoing.push_back(h1);
        outgoing.push_back(h2);

        pHandle l1 = asw->addLink(LINK, outgoing, tv);

        vhpair rh1 = asw->fakeToRealHandle(h1);
        vhpair rh2 = asw->fakeToRealHandle(h2);
        vhpair rl1 = asw->fakeToRealHandle(l1);

        CogServer& cogserver = static_cast<CogServer&>(server());
        HandleSeq realIncoming_h1 = cogserver.getAtomSpace()->getIncoming(rh1.first);
        HandleSeq realOutgoing_l1 = cogserver.getAtomSpace()->getOutgoing(rl1.first);

        pHandleSeq plnIn_h1 = asw->getIncoming(h1);
        pHandleSeq plnOut_l1 = asw->getOutgoing(l1);

        TS_ASSERT(realOutgoing_l1.size() == plnOut_l1.size());
        /*cout << "REAL: ";
        foreach (Handle realH,realIncoming_h1) {
            cout << realH << " ";
        }
        cout << endl;
        cout << "FAKE: ";
        foreach (pHandle fakeH,plnIn_h1) {
            cout << fakeH << " ";
        }
        cout << endl;*/
        TS_ASSERT(realIncoming_h1.size() == plnIn_h1.size());


        pHandleSeq pOutgoing = asw->getOutgoing(l1);

        vhpair vhFromLink = asw->fakeToRealHandle(pOutgoing[0]);
        TS_ASSERT(vhFromLink.first == rh1.first);
        TS_ASSERT(vhFromLink.second == NULL_VERSION_HANDLE);
        TS_ASSERT(rh1.second == NULL_VERSION_HANDLE);

        vhFromLink = asw->fakeToRealHandle(pOutgoing[1]);
        TS_ASSERT(vhFromLink.first == rh2.first);
        TS_ASSERT(vhFromLink.second == NULL_VERSION_HANDLE);
        TS_ASSERT(rh2.second == NULL_VERSION_HANDLE);
    }

    void testAddLinkToOneVersionedNode() {
        SimpleTruthValue tv(0.8, 0.9);
        SimpleTruthValue tv2(0.4, 0.9);
        pHandle h1 = asw->addNode(CONCEPT_NODE, "test1", tv);
        pHandle h2 = asw->addNode(CONCEPT_NODE, "test2", tv);

        pHandleSeq outgoing;
        outgoing.push_back(h1);
        outgoing.push_back(h2);

        pHandle l1 = asw->addLink(LINK, outgoing, tv);

        pHandle h3 = asw->addNode(CONCEPT_NODE, "test1", tv2, true, true);
        pHandle h4 = asw->addNode(CONCEPT_NODE, "test2", tv2, true, true);

        outgoing.clear();
        outgoing.push_back(h1);
        outgoing.push_back(h4);
        pHandle l2 = asw->addLink(LINK, outgoing, tv, true, true);

        pHandleSeq pOutgoing = asw->getOutgoing(l2);
        TS_ASSERT(outgoing.size() == pOutgoing.size());
            
        // Check nodes
        int i = 0;
        vhpair vhFromLink = asw->fakeToRealHandle(pOutgoing[i]);
        vhpair vhFromNode = asw->fakeToRealHandle(outgoing[i]);
        TS_ASSERT(vhFromLink.first == vhFromNode.first);
        TS_ASSERT(vhFromLink.second == NULL_VERSION_HANDLE);
        TS_ASSERT(vhFromNode.second == NULL_VERSION_HANDLE);

        i=1;
        vhFromLink = asw->fakeToRealHandle(pOutgoing[i]);
        vhFromNode = asw->fakeToRealHandle(outgoing[i]);
        TS_ASSERT(vhFromLink.first == vhFromNode.first);
        TS_ASSERT(vhFromLink.second == vhFromNode.second);

        // Check links
        vhFromLink = asw->fakeToRealHandle(l1);
        TS_ASSERT(vhFromLink.second == NULL_VERSION_HANDLE);
        vhFromLink = asw->fakeToRealHandle(l2);
        TS_ASSERT(vhFromLink.second != NULL_VERSION_HANDLE);
        
    }

    void testAddLinkBothVersionedNodes() {
        SimpleTruthValue tv(0.8, 0.9);
        SimpleTruthValue tv2(0.4, 0.9);
        pHandle h1 = asw->addNode(CONCEPT_NODE, "test1", tv);
        pHandle h2 = asw->addNode(CONCEPT_NODE, "test2", tv);

        pHandleSeq outgoing;
        outgoing.push_back(h1);
        outgoing.push_back(h2);

        pHandle l1 = asw->addLink(LINK, outgoing, tv);

        pHandle h3 = asw->addNode(CONCEPT_NODE, "test1", tv2, true, true);
        pHandle h4 = asw->addNode(CONCEPT_NODE, "test2", tv2, true, true);

        outgoing.clear();
        outgoing.push_back(h3);
        outgoing.push_back(h4);
        pHandle l2 = asw->addLink(LINK, outgoing, tv, true, true);

        pHandleSeq pOutgoing = asw->getOutgoing(l2);
        TS_ASSERT(outgoing.size() == pOutgoing.size());
            
        // Check nodes
        int i = 0;
        vhpair vhFromLink = asw->fakeToRealHandle(pOutgoing[i]);
        vhpair vhFromNode = asw->fakeToRealHandle(outgoing[i]);
        TS_ASSERT(vhFromLink.first == vhFromNode.first);
        TS_ASSERT(vhFromLink.second == vhFromNode.second);

        i=1;
        vhFromLink = asw->fakeToRealHandle(pOutgoing[i]);
        vhFromNode = asw->fakeToRealHandle(outgoing[i]);
        TS_ASSERT(vhFromLink.first == vhFromNode.first);
        TS_ASSERT(vhFromLink.second == vhFromNode.second);

        // Check link
        vhFromLink = asw->fakeToRealHandle(l2);
        TS_ASSERT(vhFromLink.second != NULL_VERSION_HANDLE);
    }
};

