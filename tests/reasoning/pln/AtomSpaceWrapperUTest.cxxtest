/*
 * Copyright (C) 2002-2007 Novamente LLC
 * Copyright (C) 2008 by Singularity Institute for Artificial Intelligence
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/server/CogServer.h>
#include <opencog/atomspace/SimpleTruthValue.h>

#include <opencog/reasoning/pln/PLN.h>
#include <opencog/reasoning/pln/AtomSpaceWrapper.h>

using namespace opencog;
using namespace opencog::pln;
using namespace std;

#define GET_ASW ((AtomSpaceWrapper*) ASW())

class AtomSpaceWrapperUTest :  public CxxTest::TestSuite {
private:

    AtomSpaceWrapper* asw;

public:

    AtomSpaceWrapperUTest() {
        puts("Initializing PLN test env...");

        // This access is required to initialise CogServer.
        CogServer& cogserver = static_cast<CogServer&>(server());

        //currentDebugLevel=100;

        LOG(2, "Creating AtomSpaceWrappers...");
        
        // This is also necessary to make sure that the ASW is initialized
        // at the right time.
        asw = GET_ASW;
    }

    void setUp()
    {
    }
    
    void tearDown()
    {
    }

    void testAtomSpaceWrapper() {
        puts("Testing atomspacewrapper");
//        asw->testAtomSpaceWrapper();
        SimpleTruthValue tv(0.8, 0.9);
        SimpleTruthValue tv2(0.4, 0.9);
        cout << "test add nodes" << endl;
        pHandle h1 = asw->addNode(CONCEPT_NODE, "test1", tv);
        pHandle h2 = asw->addNode(CONCEPT_NODE, "test2", tv);
        pHandleSeq outgoing;
        outgoing.push_back(h1);
        outgoing.push_back(h2);

/*  /// Test atom identity works
    Handle h1 = ASW()->addNode(FW_VARIABLE_NODE, "filler",new SimpleTruthValue(0.001f,1.0f), false, false);
    Handle h2 = ASW()->addNode(FW_VARIABLE_NODE, "filler",new SimpleTruthValue(0.001f,1.0f), false, false);

    assert(h1 == h2);
*/
        cout << "test add link to NULL version nodes" << endl;
        pHandle l1 = asw->addLink(LINK, outgoing, tv);

        cout << "test getoutgoing: " << endl;
        foreach (pHandle i, asw->getOutgoing(l1)) {
            cout << i << " ";
        }
        cout << endl;

        cout << "test getincoming: " << endl;
        foreach (pHandle i, asw->getIncoming(h1)) {
            cout << i << " ";
        }
        cout << endl;

        cout << "test add duplicate nodes (fresh = false)" << endl;
        asw->addNode(CONCEPT_NODE, "test1", tv2, false, true);
        asw->addNode(CONCEPT_NODE, "test2", tv2, false, true);

        cout << "test add nodes fresh=true" << endl;
        pHandle h3 = asw->addNode(CONCEPT_NODE, "test1", tv, true, true);
        pHandle h4 = asw->addNode(CONCEPT_NODE, "test2", tv, true, true);

        cout << "test add link to one versioned node" << endl;
        outgoing.clear();
        outgoing.push_back(h1);
        outgoing.push_back(h4);
        pHandle l2 = asw->addLink(LINK, outgoing, tv, true, true);
        cout << "test getoutgoing: " << endl;
        foreach (pHandle i, asw->getOutgoing(l2)) {
            cout << i << " ";
        }
        cout << endl;
        cout << "test add link to both versioned nodes" << endl;
        outgoing.clear();
        outgoing.push_back(h3);
        outgoing.push_back(h4);
        pHandle l3 = asw->addLink(LINK, outgoing, tv, true, true);
        cout << "test getoutgoing: " << endl;
        foreach (pHandle i, asw->getOutgoing(l3)) {
            cout << i << " ";
        }
        cout << endl;

        cout << "test getincoming of unversioned again: " << endl;
        foreach (pHandle i, asw->getIncoming(h1)) {
            cout << i << " ";
        }
        cout << endl;

        cout << "test getincoming versioned: " << endl;
        foreach (pHandle i, asw->getIncoming(h4)) {
            cout << i << " ";
        }
        cout << endl;

        //! @todo ADD TS_ASSERT

        asw->reset();
    }
};

