/** numericUTest.cxxtest --- 
 *
 * Copyright (C) 2010 OpenCog Foundation
 *
 * Author: Nil Geisweiller <ngeiswei@gmail.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 */

#include <opencog/util/numeric.h>
#include <opencog/comboreduct/combo/table.h>

using namespace std;
using namespace opencog;
using namespace combo;

class numericUTest : public CxxTest::TestSuite
{
public:
    void test_nbits_to_pack() {
        TS_ASSERT_THROWS_ANYTHING(nbits_to_pack(0));
        unsigned int res_1 = nbits_to_pack(1);
        unsigned int res_2 = nbits_to_pack(2);
        unsigned int res_3 = nbits_to_pack(3);
        unsigned int res_4 = nbits_to_pack(4);
        unsigned int res_5 = nbits_to_pack(5);

        cout << res_1 << " " << res_2 << " " << res_3 << " " 
             << res_4 << " " << res_5 << endl;

        TS_ASSERT_EQUALS(res_1, 1);
        TS_ASSERT_EQUALS(res_2, 1);
        TS_ASSERT_EQUALS(res_3, 2);
        TS_ASSERT_EQUALS(res_4, 2);
        TS_ASSERT_EQUALS(res_5, 4);
    }

    void test_mutualInformation() {
        stringstream ss("1,1,1\n"
                        "1,1,1\n"
                        "1,0,0\n"
                        "1,1,0\n"
                        "0,0,0\n");
        truth_table tt(ss);
        set<arity_t> fs{0, 1};
        ctruth_table ctt = tt.compress();
        double mi = mutualInformation(ctt, fs);
        cout << "mi = " << mi << endl;
        TS_ASSERT_DELTA(0.419973, mi, 0.0001);
    }
};

 

