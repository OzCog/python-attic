/*
 * tests/query/StackUTest.cxxtest
 *
 * Copyright (C) 2009 Linas Vepstas <linasvepstas@gmail.com>
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atomspace/Link.h>
#include <opencog/atomspace/Node.h>
#include <opencog/query/DefaultPatternMatchCB.h>
#include <opencog/query/PatternMatch.h>
#include <opencog/server/CogServer.h>
#include <opencog/util/Logger.h>

using namespace opencog;

class StackUTest :  public CxxTest::TestSuite
{
	private:
		PatternMatch pm;
		AtomSpace *as;
		Handle imake;

	public:

		StackUTest(void)
		{
			logger().setLevel(Logger::DEBUG);
			logger().setPrintToStdoutFlag(true);
		}

		~StackUTest()
		{
			// erase the log file if no assertions failed
			if (!CxxTest::TestTracker::tracker().suiteFailed())
				std::remove(logger().getFilename().c_str());
		}

		void setUp(void);

		void tearDown(void) { }

		void test_prep(void);
};

/*
 * This function sets up the following structures:
 *
 * # IF %ListLink("# DOSTUFF", $sent)
 *     ^ %WordInstanceLink($var0,$sent)
 *     THEN ^3_blah($var0)
 * 
 * This pattern should accept this input: 
 *    xxxx
 * and should call teh user callback three times!
 *
 */
#define an as->addNode
#define al as->addLink
void StackUTest::setUp(void)
{
	CogServer& cogserver = static_cast<CogServer&>(server());
	as = cogserver.getAtomSpace();
	pm.set_atomspace(as);

	// Create an implication link that will be tested.
	imake = 
	al(IMPLICATION_LINK,
		al(AND_LINK,
			al(LIST_LINK,
				an(CONCEPT_NODE, "# DOSTUFF"),
				an(VARIABLE_NODE, "$sent")
			),
			al(LIST_LINK,
				an(VARIABLE_NODE, "$var"),
				an(VARIABLE_NODE, "$sent")
			)
		),
		al(LIST_LINK,
			an(CONCEPT_NODE, "whoopee"),
			an(VARIABLE_NODE, "$var")
		)
	);

	// Create data on which the above pattern should match
	al(LIST_LINK,
		an(CONCEPT_NODE, "# DOSTUFF"),
		an(CONCEPT_NODE, "thing A")
	);
	al(LIST_LINK,
		an(CONCEPT_NODE, "# DOSTUFF"),
		an(CONCEPT_NODE, "thing B")
	);
	al(LIST_LINK,
		an(CONCEPT_NODE, "# DOSTUFF"),
		an(CONCEPT_NODE, "thing C")
	);
}

/*
 * stack-usage/bound-variable test.
 * Expect the user callback to be called for each match.
 * i.e. it should be called three times.
 *
 */
void StackUTest::test_prep(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	// Result should be a ListLink
	Handle result = pm.imply(imake);
	// TSM_ASSERT_DIFFERS("no solutions found", 0, getarity(result));

	logger().debug("END TEST: %s", __FUNCTION__);
}
