/*
 * tests/query/QuoteUTest.cxxtest
 *
 * Copyright (C) 2014 Linas Vepstas
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/load-file.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/server/CogServer.h>
#include <opencog/query/BindLink.h>
#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>

using namespace opencog;

class QuoteUTest: public CxxTest::TestSuite
{
private:
        AtomSpace *as;
        SchemeEval* eval;

public:
    QuoteUTest(void)
    {
        try
        {
             config().load("opencog-test.conf");
        }
        catch (RuntimeException &e)
        {
            std::cerr << e.getMessage() << std::endl;
        }
        logger().setFilename(config()["LOG_FILE"]);
        logger().setLevel(Logger::getLevelFromString(config()["LOG_LEVEL"]));
        logger().setPrintToStdoutFlag(config().get_bool("LOG_TO_STDOUT"));

        server(CogServer::createInstance);
        as = &cogserver().getAtomSpace();
        eval = new SchemeEval(as);
    }

    ~QuoteUTest()
    {
        delete as;
        // Erase the log file if no assertions failed.
        if (!CxxTest::TestTracker::tracker().suiteFailed())
                std::remove(logger().getFilename().c_str());
    }

    void setUp(void);
    void tearDown(void);

    void test_numeric_greater(void);
    void test_quoted_variable(void);
};

void QuoteUTest::tearDown(void)
{
}

void QuoteUTest::setUp(void)
{
    config().set("SCM_PRELOAD",
        "opencog/atomspace/core_types.scm, "
        "opencog/scm/utilities.scm");

    load_scm_files_from_config(*as);

    config().set("MODULES",
        "opencog/query/libQueryModule.so");

    cogserver().loadModules();
}

/*
 * QuoteLink unit test.  Derivative of the GreaterThanUTest,
 * this one differs by explicitly quoting the GroundedSchemaNode,
 * so that it is explicitly matched, instead of being treated as
 * a virtual.
 */
void QuoteUTest::test_numeric_greater(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    config().set("SCM_PRELOAD", "tests/query/quote-greater.scm");
    load_scm_files_from_config(*as);

    Handle richer_than_george = eval->eval_h("(richer-than-george)");
    Handle richer_than_susan = eval->eval_h("(richer-than-susan)");
    Handle richer_than_obama = eval->eval_h("(richer-than-obama)");
    Handle richer_than_gates = eval->eval_h("(richer-than-gates)");

    Handle people_richer_than_george = bindlink(as, richer_than_george);
    Handle people_richer_than_susan = bindlink(as, richer_than_susan);
    Handle people_richer_than_obama = bindlink(as, richer_than_obama);
    Handle people_richer_than_gates = bindlink(as, richer_than_gates);

    TS_ASSERT_EQUALS(0, as->getArity(people_richer_than_gates));
    TS_ASSERT_EQUALS(0, as->getArity(people_richer_than_obama));
    TS_ASSERT_EQUALS(1, as->getArity(people_richer_than_george));
    TS_ASSERT_EQUALS(2, as->getArity(people_richer_than_susan));
}

/*
 * QuoteLink unit test.  Test quoted variables.
 */
void QuoteUTest::test_quoted_variable(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    config().set("SCM_PRELOAD", "tests/query/quote-var.scm");
    load_scm_files_from_config(*as);

    Handle bindy = eval->eval_h("bindy");

    Handle bananna = bindlink(as, bindy);
    TS_ASSERT_EQUALS(1, as->getArity(bananna));

    bananna = as->getOutgoing(bananna, 0);
    TS_ASSERT_EQUALS(CONCEPT_NODE, bananna->getType());
 
    TS_ASSERT_EQUALS(0, strcmp("bananna", as->getName(bananna).c_str()));
}
