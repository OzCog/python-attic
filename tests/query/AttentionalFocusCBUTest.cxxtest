/*
 * AttentionalFocusCBUTest.cxxtest
 *
 *  Created on: 20 Jun, 2014
 *      Author: misgana
 */
#include <opencog/guile/load-file.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/server/CogServer.h>
#include <opencog/query/PatternMatch.h>
#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>

using namespace opencog;

class AttentionalFocusCBUTest: public CxxTest::TestSuite {
private:
	PatternMatch pm;
	AtomSpace * as;
	SchemeEval * eval;
public:
	AttentionalFocusCBUTest(void) {

		try {
			config().load("opencog-test.conf");
		} catch (RuntimeException &e) {
			std::cerr << e.getMessage() << std::endl;
		}
		logger().setFilename(config()["LOG_FILE"]);
		logger().setLevel(Logger::getLevelFromString(config()["LOG_LEVEL"]));
		logger().setPrintToStdoutFlag(config().get_bool("LOG_TO_STDOUT"));

		server(CogServer::createInstance);
		as = &cogserver().getAtomSpace();
		pm.set_atomspace(as);
		eval = new SchemeEval(as);
	}
	~AttentionalFocusCBUTest() {
		delete as;
		// Erase the log file if no assertions failed.
		if (!CxxTest::TestTracker::tracker().suiteFailed())
			std::remove(logger().getFilename().c_str());
	}

	void setUp(void);
	void tearDown(void);
	void test_pln_bindlink(void);
};
void AttentionalFocusCBUTest::tearDown(void) {

}
void AttentionalFocusCBUTest::setUp(void) {
	pm.set_atomspace(as);

	config().set("SCM_PRELOAD", "opencog/atomspace/core_types.scm, "
			"opencog/scm/utilities.scm");

	load_scm_files_from_config(*as);

	config().set("MODULES", "opencog/query/libQueryModule.so");

	cogserver().loadModules();

}

void AttentionalFocusCBUTest::test_pln_bindlink(void) {

	logger().debug("BEGIN TEST: %s", __FUNCTION__);
    as->setAttentionalFocusBoundary(20); //for test purpose
	config().set("SCM_PRELOAD", "tests/query/af-filtering-test.scm");
	load_scm_files_from_config(*as);
	Handle findMan = eval->eval_h("find-man");
	// Test PatternMatch::pln_bindlink, which should only return the
	// first match
	Handle answersSingle = pm.pln_bindlink(findMan);
	TS_ASSERT_EQUALS(1, as->getArity(answersSingle));
	TS_ASSERT_EQUALS(20,as->getAttentionalFocusBoundary());
}
