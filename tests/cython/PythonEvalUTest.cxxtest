#include <string>
#include <cstdio>

#include <opencog/util/Config.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/cython/PythonEval.h>

using std::string;

using namespace opencog;

const int NO_SIGNAL_HANDLERS = 0;


class PythonEvalUTest :  public CxxTest::TestSuite
{

private:


public:

    PythonEvalUTest() {

        // Load special config file for the test
        string configFile = PROJECT_BINARY_DIR"/tests/cython/pythoneval.conf";
        try {
            config().load(configFile.c_str(), false);
        } catch (RuntimeException &e) {
            std::cerr << e.getMessage() << std::endl;
            exit(1);
        }

        logger().setPrintToStdoutFlag(true);

        // setup global logger
        logger().setFilename(config()["LOG_FILE"]);
        logger().setLevel(Logger::getLevelFromString(config()["LOG_LEVEL"]));
        logger().setBackTraceLevel(Logger::getLevelFromString(config()["BACK_TRACE_LOG_LEVEL"]));
        logger().setPrintToStdoutFlag(config().get_bool("LOG_TO_STDOUT"));
    }

    ~PythonEvalUTest() {
    }

    void setUp() {
    }

    void tearDown() {
    }

    void testRawPythonInitialization() {

        logger().debug("[PythonEvalUTest] testRawPythonInitialization()");

        // Start up Python.
        Py_InitializeEx(NO_SIGNAL_HANDLERS);
        PyEval_InitThreads();

        // Release the GIL.
        PyEval_ReleaseLock();

        // Stop Python.
        Py_Finalize();


        // Try it again to make sure the Python library cleans up properly.
     
        // Start up Python.
        Py_InitializeEx(NO_SIGNAL_HANDLERS);
        PyEval_InitThreads();

        // Release the GIL.
        PyEval_ReleaseLock();

        // Stop Python.
        Py_Finalize();


        // And again...
     
        // Start up Python.
        Py_InitializeEx(NO_SIGNAL_HANDLERS);
        PyEval_InitThreads();

        // Release the GIL.
        PyEval_ReleaseLock();

        // Stop Python.
        Py_Finalize();
 
         logger().debug("[PythonEvalUTest] testRawPythonInitialization() DONE");
   }

    void testRawPythonInitializeWithGetSys(){

        logger().debug("[PythonEvalUTest] testRawPythonInitializeWithGetSys()");

        PyObject* pySysPath = NULL;

        // Get the system path object.
        Py_InitializeEx(NO_SIGNAL_HANDLERS);
        PyEval_InitThreads();

        PyRun_SimpleString(
                    "import sys\n"
                    "import StringIO\n"
                    );
        pySysPath = PySys_GetObject((char*)"path");

        Py_ssize_t pathSize = PyList_Size(pySysPath);
        for (int pathIndex = 0; pathIndex < pathSize; pathIndex++) {
            PyObject* pySysPathLine = PyList_GetItem(pySysPath, pathIndex);
            logger().info("        %2d > %s", pathIndex, PyString_AsString(pySysPathLine));
            // NOTE: PyList_GetItem returns a borrowed reference so don't do this:
            // Py_DECREF(pySysPathLine);
        }

        // NOTE: PySys_GetObject returns a borrowed reference so don't do this:
        // Py_DECREF(pySysPath);

        PyEval_ReleaseLock();
        Py_Finalize();

        // Get it again
        Py_InitializeEx(NO_SIGNAL_HANDLERS);
        PyEval_InitThreads();

        PyRun_SimpleString(
                    "import sys\n"
                    "import StringIO\n"
                    );
        pySysPath = PySys_GetObject((char*)"path");

        // NOTE: PySys_GetObject returns a borrowed reference so don't do this:
        // Py_DECREF(pySysPath);

        PyEval_ReleaseLock();
        Py_Finalize();

        logger().debug("[PythonEvalUTest] testRawPythonInitializeWithGetSys() DONE");
    }

    void testCogServerPythonInitialization() {

        logger().debug("[PythonEvalUTest] testCogServerPythonInitialization()");

         // Initialize and finalize Python.
        global_python_initialize();
        global_python_finalize();

         // Initialize and finalize Python.
        global_python_initialize();
        global_python_finalize();

        logger().debug("[PythonEvalUTest] testCogServerPythonInitialization() DONE");
    }

    void testPythonEvalScript() {

        logger().debug("[PythonEvalUTest] testPythonEvalScript()");

        AtomSpace* atomSpace = NULL;

        // Initialize Python.
        global_python_initialize();

        // Tell the python evaluator to create its singleton instance.
        PythonEval::create_singleton_instance(NULL);

        // Delete the singleton instance of the PythonEval.
        PythonEval::delete_singleton_instance();

        // Cleanup Python.
        global_python_finalize();


        // Now do it again with a non-NULL atomspace object.

        // Initialize Python.
        global_python_initialize();

        // Create an atomspace.
        atomSpace = new AtomSpace();

        // Tell the python evaluator to create its singleton instance
        // with this atomspace.
        PythonEval::create_singleton_instance(atomSpace);

        // Delete the singleton instance of the PythonEval.
        PythonEval::delete_singleton_instance();

        // Delete the atomspace.
        delete atomSpace;
        atomSpace = NULL;

        // Cleanup Python.
        global_python_finalize();


        // Now do it again to make sure we cleaned up properly.


        // Initialize Python.
        global_python_initialize();

        // Create an atomspace.
        atomSpace = new AtomSpace();

        // Tell the python evaluator to create its singleton instance
        // with this atomspace.
        PythonEval::create_singleton_instance(atomSpace);

        // Delete the singleton instance of the PythonEval.
        PythonEval::delete_singleton_instance();

        // Delete the atomspace.
        delete atomSpace;
        atomSpace = NULL;

        // Cleanup Python.
        global_python_finalize();

        logger().debug("[PythonEvalUTest] testPythonEvalScript() DONE");
    }

};
