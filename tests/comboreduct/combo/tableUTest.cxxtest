/** tableUTest.cxxtest --- 
 *
 * Copyright (C) 2011 OpenCog Foundation
 *
 * Author: Nil Geisweiller <nilg@desktop>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
#include <opencog/comboreduct/combo/table.h>
#include <opencog/comboreduct/combo/table_io.h>

using namespace opencog;
using namespace combo;
using namespace std;

const string olabel = "happiness";
const string label1 = "price";
const string label2 = "temperature";
const string tableUTest_dir = string(PROJECT_SOURCE_DIR) + "/tests/comboreduct/combo/";

class tableUTest : public CxxTest::TestSuite {
private:
    template<typename IT, typename OT>
    void testIStreamTable(const string& ts, const IT& it, const OT& ot,
                          bool has_header, const type_tree& tt,
                          int target_col = 0,
                          std::vector<int> ignore_cols= std::vector<int>()) {
        stringstream ss(ts);
        IT it_test;
        OT ot_test;
        istreamTable(ss, it_test, ot_test, has_header, tt,
                     target_col, ignore_cols);
        std::cout << "it =" << std::endl;
        std::cout << it << std::endl;
        std::cout << "it_test =" << std::endl;
        std::cout << it_test << std::endl;
        std::cout << "ot =" << std::endl;
        std::cout << ot << std::endl;
        std::cout << "ot_test =" << std::endl;
        std::cout << ot_test << std::endl;
        TS_ASSERT_EQUALS(it, it_test);
        TS_ASSERT_EQUALS(ot, ot_test);
    }
public:
    
    tableUTest() {
        logger().setPrintToStdoutFlag(true);
        logger().setLevel(Logger::DEBUG);
    }

    void test_TruthTable() {
        vertex_seq o{id::logical_true, id::logical_false};
        OTable ot(o);
        ITable it;
        it.push_back({id::logical_true, id::logical_false});
        it.push_back({id::logical_false, id::logical_true});
        testIStreamTable("1,1,0\n"
                         "0,0,1\n", it, ot, false,
                         gen_signature(id::boolean_type, 2));
    }
    void test_ContinTable() {
        vertex_seq o{10.1, 6.5};
        OTable ot(o);
        ITable it;
        it.push_back({0.4, 244.2});
        it.push_back({9.5, 4.2});
        testIStreamTable("10.1,0.4,244.2\n"
                         "6.5,9.5,4.2\n", it, ot, false,
                         gen_signature(id::contin_type, 2));
    }
    void test_ContinTableLabels() {
        vertex_seq o{10.1, 6.5};
        OTable ot(o, olabel);
        ITable it;
        it.push_back({0.4, 244.2});
        it.push_back({9.5, 4.2});
        vector<string> il{label1, label2};
        it.set_labels(il);
        testIStreamTable("happiness,price,temperature\n"
                         "10.1,0.4,244.2\n"
                         "6.5,9.5,4.2\n", it, ot, true,
                         gen_signature(id::contin_type, 2));
    }

    void test_filterITable()
    {
        ITable it;
        it.push_back({id::logical_true, id::logical_false});
        it.push_back({id::logical_false, id::logical_true});
        vector<string> lbs{"truc" ,"trac"};
        it.set_labels(lbs);
        vertex_seq o{id::logical_true, id::logical_false,};
        // ignore second argument trac
        vector<arity_t> args{0};
        ITable fit_it = it.filtered(args);
        OTable ot(o, "troc");
        stringstream ss;
        ostreamTable(ss, fit_it, ot);
        cout << "result:" << endl;
        cout << ss.str();
        cout << "fit_it:" << endl;
        cout << fit_it;
        cout << "ot:" << endl;
        cout << ot;
        TS_ASSERT_EQUALS(ss.str(),
                         "troc,truc\n"
                         "1,1\n"
                         "0,0\n");
    }

    void test_filterCTable()
    {
        ITable it;
        it.push_back({id::logical_true, id::logical_false});
        it.push_back({id::logical_false, id::logical_true});
        vector<string> lbs{"truc" ,"trac"};
        it.set_labels(lbs);
        vertex_seq o{id::logical_true, id::logical_false,};
        OTable ot(o, "troc");
        Table table(ot, it, gen_signature(id::boolean_type, 2));
        // Generate CTable
        CTable ctable = table.compressed();
        // ignore second argument trac
        vector<arity_t> args{0};
        CTable filtered_ctable = ctable.filtered(args);
        stringstream ss;
        ostreamCTable(ss, filtered_ctable);
        cout << "result:" << endl;
        cout << ss.str();
        TS_ASSERT_EQUALS(ss.str(),
                         "troc,truc\n"
                         "{true:1},true\n"
                         "{false:1},false\n");
    }

    // Set target Price, and ignore column Temperature
    void test_target_col_ignore_col()
    {
        vertex_seq o{0.4, 9.5}; // price column
        OTable ot(o, label1);
        ITable it;
        it.push_back({10.1});
        it.push_back({6.5});
        vector<string> il{olabel};
        it.set_labels(il);
        testIStreamTable("happiness,price,temperature\n"
                         "10.1,0.4,244.2\n"
                         "6.5,9.5,4.2\n", it, ot, true,
                         gen_signature(id::contin_type, 1),
                         1, {2});
    }

    void test_mutualInformation()
    {
        string target_feature;
        vector<string> ignore_features;
        Table tt = loadTable(tableUTest_dir + "dataset.csv", target_feature, ignore_features);
        set<arity_t> fs{0, 1};
        CTable ctt = tt.compressed();
        double mi = mutualInformation(ctt, fs);
        cout << "mi = " << mi << endl;
        TS_ASSERT_DELTA(0.419973, mi, 0.0001);
    }

    void test_insert_get_pos()
    {
        ITable it;
        vertex_seq col1 = {id::logical_true, id::logical_false};
        it.insert_col("label1", col1);
        {
            stringstream ss_res;
            ss_res << it;
            TS_ASSERT_EQUALS(ss_res.str(), string("label1\n1\n0\n"));
        }
        vertex_seq col2 = {id::logical_false, id::logical_true};
        it.insert_col("label2", col2);
        {
            stringstream ss_res;
            ss_res << it;
            TS_ASSERT_EQUALS(ss_res.str(), string("label1,label2\n1,0\n0,1\n"));
        }
        auto lc = it.get_col(1);
        it.insert_col(lc.first, lc.second, 0);
        {
            stringstream ss_res;
            ss_res << it;
            TS_ASSERT_EQUALS(ss_res.str(), string("label2,label1,label2\n0,1,0\n1,0,1\n"));
        }
    }
};
