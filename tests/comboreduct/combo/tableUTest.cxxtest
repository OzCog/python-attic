/** tableUTest.cxxtest --- 
 *
 * Copyright (C) 2011 OpenCog Foundation
 *
 * Author: Nil Geisweiller <nilg@desktop>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
#include <opencog/comboreduct/combo/table.h>
#include <boost/assign/list_of.hpp>

using namespace opencog;
using namespace combo;
using namespace std;
using namespace boost::assign;

const string label1 = "price";
const string label2 = "temperature";
const string olabel = "happiness";

class tableUTest : public CxxTest::TestSuite {
private:
    template<typename IT, typename OT>
    void testIStreamTable(const string& ts, const IT& it, const OT& ot) {
        stringstream ss(ts);
        IT it_test;
        OT ot_test;
        istreamTable(ss, it_test, ot_test);
        std::cout << "it =" << std::endl;
        std::cout << it << std::endl;
        std::cout << "it_test =" << std::endl;
        std::cout << it_test << std::endl;
        std::cout << "ot =" << std::endl;
        std::cout << ot << std::endl;
        std::cout << "ot_test =" << std::endl;
        std::cout << ot_test << std::endl;
        TS_ASSERT_EQUALS(it, it_test);
        TS_ASSERT_EQUALS(ot, ot_test);
    }
public:
    void test_TruthTable() {
        truth_input_table it;
        it.push_back(list_of(true)(false));
        it.push_back(list_of(false)(true));
        bool_vector o = list_of(true)(false);
        truth_output_table ot(o);
        testIStreamTable("1,0,1\n"
                         "0,1,0\n", it, ot);
    }
    void test_ContinTable() {
        contin_input_table it;
        it.push_back(list_of(0.4)(244.2));
        it.push_back(list_of(9.5)(4.2));
        contin_vector o = list_of(10.1)(6.5);
        contin_output_table ot(o);
        testIStreamTable("0.4,244.2,10.1\n"
                         "9.5,4.2,6.5\n", it, ot);
    }
    void test_ContinTableLabels() {
        contin_input_table it;
        it.push_back(list_of(0.4)(244.2));
        it.push_back(list_of(9.5)(4.2));
        vector<string> il = list_of(label1)(label2);
        it.set_labels(il);
        contin_vector o = list_of(10.1)(6.5);
        contin_output_table ot(o, olabel);
        testIStreamTable("price,temperature,happiness\n"
                         "0.4,244.2,10.1\n"
                         "9.5,4.2,6.5\n", it, ot);
    }
    void test_ostreamTrueTable() {
        truth_input_table it;
        it.push_back(list_of(true)(false));
        it.push_back(list_of(false)(true));
        vector<string> lbs = list_of("truc")("trac");
        it.set_labels(lbs);
        bool_vector o = list_of(true)(false);
        // ignore second argument trac
        vector<arity_t> args = list_of(0);
        truth_input_table fit = it.filter(args);
        truth_output_table ot(o);
        ot.set_label("troc");
        stringstream ss;
        ostreamTable(ss, fit, ot);
        TS_ASSERT_EQUALS(ss.str(), "truc,troc\n1,1\n0,0\n");
    }
};
