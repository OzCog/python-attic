/*
 * tests/atomspace/UseCountUTest.cxxtest
 *
 * Copyright (C) 2013, 2014 Linas Vepstas <linasvepstas@gmail.com>
 * All Rights Reserved
 *
 * Written by Linas Vepstas <linasvepstas@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <algorithm>
#include <atomic>
#include <thread>

#include <math.h>
#include <string.h>

#include <boost/bind.hpp>

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atomspace/Node.h>
#include <opencog/atomspace/SimpleTruthValue.h>
#include <opencog/util/Logger.h>
#include <opencog/util/RandGen.h>
#include <opencog/util/mt19937ar.h>
#include <opencog/util/platform.h>
#include <opencog/util/Config.h>

#include "misc-test.h"

using namespace opencog;
using namespace std;

class UseCountUTest :  public CxxTest::TestSuite
{
private:

    AtomSpace *atomSpace;
    Handle anchor;

    // Counters must be atomic; we are incrementing them inside threads
    std::atomic_size_t __totalAdded;

    int n_threads;
    int num_atoms;
    bool spinwait;

public:
    UseCountUTest()
    {
        // Current atomspace can to 50K or 100K atoms/sec, so the 
        // below should run for at least 2 to 5 seconds each time.
        n_threads = 20;
        num_atoms = 13000;
        logger().setLevel(Logger::INFO);
        logger().setPrintToStdoutFlag(true);
    }

    void setUp()
    {
        atomSpace = new AtomSpace();
    }

    void tearDown()
    {
        delete atomSpace;
    }

    // =================================================================

    void threadedLinkAdd(int thread_id, int N)
    {
        // Create Lots of the following structures:
        //
        //    ListLink
        //        AnchorNode "the anchor"
        //        ConceptNode "some value"
        //
        for (int i = 0; i < N; i++) {
            std::ostringstream oss;
            oss << "thread " << thread_id << " node " << i;

            Handle n = atomSpace->addNode(CONCEPT_NODE, oss.str());

            Type t = LIST_LINK;
            atomSpace->addLink(t, anchor, n); 
        }
    }

    void testUseCount()
    {
        // reset the counts
        __totalAdded = 0;

        anchor = atomSpace->addNode(ANCHOR_NODE, "*** The Anchor ***");
        __totalAdded++;
        long int initial_use_count = AtomPtr(anchor).use_count();
        std::cout << "Initial anchor use count=" << initial_use_count << std::endl;

        // Add lotsa links
        std::vector<std::thread> thread_pool;
        for (int i=0; i < n_threads; i++) {
            thread_pool.push_back(
                std::thread(&UseCountUTest::threadedLinkAdd, this, i, num_atoms));
        }
        for (std::thread& t : thread_pool) t.join();
        size_t size = atomSpace->getSize();
        std::cout << "Link atomspace size:" << size << std::endl;

        // We should get only 2*num_atoms, because all threads created duplicates.
        // num_atoms nodes, and num_atoms links.
        TS_ASSERT_EQUALS(size, 2*num_atoms);

        TS_ASSERT_EQUALS((int) __totalAdded, num_atoms);
    }

    // =================================================================
};
