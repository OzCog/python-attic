/*
 * tests/atomspace/RemoveUTest.cxxtest
 *
 * Copyright (C) 2014 Linas Vepstas
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atomspace/Atom.h>
#include <opencog/atomspace/AtomSpace.h>

using namespace opencog;

// Test support atom removal in multiple atomspaces.
// See also MultiSpace.cxxtest for basic multi-atomspace tests.
//
class RemoveUTest :  public CxxTest::TestSuite
{
private:

	AtomSpace as1;
	AtomSpace as2;
	AtomSpace as3;

public:
	RemoveUTest() {}

	void setUp() {}

	void tearDown() {}

	void testSimple();
};

// Simple test of naive multiple atomspaces.  Create three
// distinct atomspaces, make sure they behave like atomspaces
// should.
void RemoveUTest::testSimple()
{
	TS_ASSERT(as1.getSize() == 0);
	TS_ASSERT(as2.getSize() == 0);
	TS_ASSERT(as3.getSize() == 0);

	// Create atoms in different atomspaces
	Handle hna = as1.addNode(CONCEPT_NODE, "node a");
	Handle hnb = as1.addNode(CONCEPT_NODE, "node b");

	Handle hli = as2.addLink(LIST_LINK, hna, hnb);

	TS_ASSERT(as1.getSize() == 2);
	TS_ASSERT(as2.getSize() == 1);

	// Recursive removal of hna should blow away hli.
	as1.removeAtom(hna);

	TS_ASSERT(as1.getSize() == 1);
	TS_ASSERT(as2.getSize() == 0);

	// Both hna and hli should still point to valid atoms
	LinkPtr li(LinkCast(hli));
	TS_ASSERT(li->getArity() == 2);
	TS_ASSERT(li->getOutgoingAtom(0) == hna);
	TS_ASSERT(li->getOutgoingAtom(1) == hnb);
}

