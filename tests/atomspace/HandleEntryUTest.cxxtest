/*
 * tests/atomspace/HandleEntryUTest.cxxtest
 *
 * Copyright (C) 2002-2007 Novamente LLC
 * All Rights Reserved
 *
 * Written by Welter Silva <welter@vettalabs.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atomspace/CompositeTruthValue.h>
#include <opencog/atomspace/Link.h>
#include <opencog/atomspace/Node.h>
#include <opencog/util/Logger.h>
#include <opencog/util/platform.h>

#include "HandleEntry.h"

using namespace opencog;

class HandleEntryUTest :  public CxxTest::TestSuite
{

private:
    AtomSpace _as;
    AtomPtr a1;
    AtomPtr a2;
    Handle h1;
    Handle h2;

public:
    HandleEntryUTest() {
        h1 = _as.addNode(CONCEPT_NODE, "atom one");
        h2 = _as.addNode(CONCEPT_NODE, "atom two");
        a1 = h1;
        a2 = h2;
    }

    void setUp() {
    }

    void tearDown() {
    }

    void printHandleEntry(HandleEntry* p) {
        logger().debug("HandleEntry = %s", p->toString().c_str());
        /*
        while (p != NULL) {
            logger().debug("p = %p", p);
            logger().debug("p->getAtom() = %p", p->getAtom());
            logger().debug("p->getAtom()->getTruthValue() = %p", p->getAtom()->getTruthValue());
            TruthValue* tv = p->getAtom()->getTruthValue();
            logger().debug("%s", TruthValue::typeToStr(tv->getType()).c_str());
            logger().debug("%s", tv->toString().c_str());
            p = p->next;
        }
        */
    }

};
