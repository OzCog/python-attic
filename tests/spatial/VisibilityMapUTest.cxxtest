#include <cxxtest/TestSuite.h>
#include <sstream>
#include <iostream>

#include <opencog/spatial/VisibilityMap.h>
#include <opencog/spatial/StaticEntity.h>

using namespace Spatial;
using namespace Spatial::Math;

class VisibilityMapUTest : public CxxTest::TestSuite {
public:
  
    void testMapBuilding( ) {

        VisibilityMap map( Vector3( -165000, 0, 142000 ), Vector3( -37000, 0, 270000 ), 1024 );

        unsigned int row;
        unsigned int col;
        for( row = 0; row < 51; ++row ) {
            for( col = 0; col < 51; ++col ) {
                // std::cout << "r: " << row << "c: " << col << std::endl;
                TS_ASSERT( map.getTile( row, col ) );
            } // for
        } // for    

        /*
          try {
          std::cout << map.getNextHiddenTile( 8, 9 )->getCenter( ).toString( ) << std::endl;
          map.getNextHiddenTile( 11, 9 );
          } catch( opencog::NotFoundException& ex ) {
          std::cout << ex.getMessage( ) << std::endl;
          } catch( opencog::InvalidParamException& ex ) {
          std::cout << ex.getMessage( ) << std::endl;
          } 
        */

        TS_ASSERT_THROWS_NOTHING( map.getNextHiddenTile( 6, 9 ) )

        TS_ASSERT_THROWS_ANYTHING( map.getNextVisibleTile( 6, 9 ) )
        TS_ASSERT_THROWS_ANYTHING( map.getNextVisibleTile( 6, 1030 ) )

        TS_ASSERT_THROWS_ANYTHING( map.getNearestVisibleTile( Vector3(), 6, 9 ) )

        TS_ASSERT_THROWS_NOTHING( map.getNearestHiddenTile( Vector3(), 6, 9 ) )
  
    }

    void testAreas( void ) {
        VisibilityMap map( Vector3( -165000, 0, 142000 ), Vector3( -37000, 0, 270000 ), 128 );
        //std::cout << map.getAreaCenter( 0, 9 ).toString( ) << std::endl;
        //std::cout << map.getAreaCenter( 8, 9 ).toString( ) << std::endl;
        //std::cout << map.getAreaCenter( 2, 9 ).toString( ) << std::endl;
        //std::cout << map.getTile( 20, 60 )->getCenter( ).toString( ) << std::endl;
    
        TS_ASSERT( map.getAreaCenter( 0, 9 ) == map.getTile( 21, 21 )->getCenter( ) )
        TS_ASSERT( map.getAreaCenter( 1, 9 ) == map.getTile( 21, 63 )->getCenter( ) )
        TS_ASSERT( map.getAreaCenter( 2, 9 ) == map.getTile( 21, 105 )->getCenter( ) )

        TS_ASSERT( map.getAreaCenter( 3, 9 ) == map.getTile( 63, 21 )->getCenter( ) )
        TS_ASSERT( map.getAreaCenter( 4, 9 ) == map.getTile( 63, 63 )->getCenter( ) )
        TS_ASSERT( map.getAreaCenter( 5, 9 ) == map.getTile( 63, 105 )->getCenter( ) )

        TS_ASSERT( map.getAreaCenter( 6, 9 ) == map.getTile( 105, 21 )->getCenter( ) )
        TS_ASSERT( map.getAreaCenter( 7, 9 ) == map.getTile( 105, 63 )->getCenter( ) )
        TS_ASSERT( map.getAreaCenter( 8, 9 ) == map.getTile( 105, 105 )->getCenter( ) )

     }

    void testGetNearestVisibleTile( void ) {

        VisibilityMap map( Vector3( -165000, 0, 142000 ), Vector3( -37000, 0, 270000 ), 1024 );
        
        unsigned int row;
        unsigned int col;
        for( row = 0; row < 1024; ++row ) {
            for( col = 0; col < 1024; ++col ) {
	
                const VisibilityMap::TilePtr& tile = map.getTile( row, col );
                //std::cout << tile->getCenter( ).toString( ) << std::endl;
                const VisibilityMap::TilePtr& tile2 = map.getTile( tile->getCenter( ) );
                //std::cout << "r1: " << tile2->getRow( ) << "c1: " << tile2->getCol( ) << std::endl;
	
                if ( ((row*col) %4) == 0 ) {
                    //tile->setVisibility( true );
                } // if
                TS_ASSERT( tile == tile2 )
            } // for
        } // for 

      

        const VisibilityMap::TilePtr& tile = map.getTile( 20, 20 );
        //map.getTile( 20, 21 )->setVisibility( true );
        map.getTile( 19, 21 )->setVisibility( true );
        //map.getTile( 19, 20 )->setVisibility( true );
        VisibilityMap::TilePtr nearestTile;
        TS_ASSERT_THROWS_NOTHING(
                                 nearestTile = map.getNearestVisibleTileToPosition( tile->getCenter( ) )
                                 )
            TS_ASSERT( nearestTile == map.getTile( 19, 21 ) )	
            //std::cout << nearestTile->getRow( ) << " " << nearestTile->getCol( ) << std::endl;
            //} catch( opencog::NotFoundException& ex ) {
            //std::cerr << ex.getMessage( ) << std::endl;
            //}
      
            try {
                VisibilityMap map2( Vector3( -130000, 0, 190000 ), Vector3( -70000, 0, 250000 ), 1024 );
                const VisibilityMap::TilePtr& tile = map2.getTile( Spatial::Math::Vector3( -120272, 0, 220816 ) );
                TS_ASSERT( tile != NULL )
                    //	 std::cout << tile->getCenter( ).toString( ) << " " << tile->getRow( ) << " " << tile->getCol( ) << std::endl;
                    map2.getTile( 57, 57 )->setVisibility( true );

                //       map2.getNearestVisibleTileToPosition( Spatial::Math::Vector3( -120272, 0, 220816 ) );

            } catch( opencog::NotFoundException& ex ) {
                std::cerr << ex.getMessage( ) << std::endl;
            } // catch
    
    } 

    void testSaveLoadFromFile( void ) {
        VisibilityMap map2( Vector3( -130000, 0, 190000 ), Vector3( -70000, 0, 250000 ), 1024 );
        map2.getTile( 57, 57 )->setVisibility( true );

        VisibilityMap::saveToFile( "visibilityMap.bin", map2 );
    
        VisibilityMapPtr map1 = VisibilityMap::loadFromFile( "visibilityMap.bin" );
        TS_ASSERT( map1 != NULL )
            TS_ASSERT( map2.getTile( 57, 57 )->isVisible( ) == map1->getTile( 57, 57 )->isVisible( ) )
            }

    void testVisibility( void ) {
        VisibilityMap map2( Vector3( -130000, 0, 190000 ), Vector3( -70000, 0, 250000 ), 1024 );
       
        StaticEntity e1( 1, "e1", Math::Vector3( -81360.0, 220816.0, 0 ), Math::Dimension3(250, 1800, 250 ), Math::Quaternion( Math::Vector3::Z_UNIT, 0 ) );
        //    StaticEntity e2( 2, "e2", Math::Vector3( -80336, 203408, 0 ), Math::Dimension3(250, 1800, 250 ), Math::Quaternion( Math::Vector3::Z_UNIT, 0 ) );
    
        TS_ASSERT( map2.isInsideArea( e1, 5, 9 ) )

            //    std::cout << "Center: " << map2.getAreaCenter( 6, 9 ).toString( ) << std::endl;
    
            //  Spatial::VisibilityMap::Tile* tile = map2.getNextHiddenTile( 6, 9 );
    
            //   std::cout << "Tile at area 9: " << tile->getCenter( ).toString( ) << std::endl;
            //    TS_ASSERT( map2.isInsideArea( e2, 0, 9 ) )
            //    TS_ASSERT( map2.isInsideArea( e2, 2, 9 ) )
            //    TS_ASSERT( map2.isInsideArea( e2, 6, 9 ) )
            //    TS_ASSERT( map2.isInsideArea( e2, 8, 9 ) )


            VisibilityMap map3( Vector3( 0, 0, 0 ), Vector3( 4096, 0, 4096 ), 1024 );

    
        try {
            VisibilityMap::TilePtr tile( map3.getTile( 0, 0 ) );
            VisibilityMap::TilePtr tile2( map3.getTile( 3, 3 ) );

      
            tile->setVisibility( true );
            map3.getNearestVisibleTileToPosition( tile2->getCenter( ) );

        } catch( opencog::NotFoundException& ex ) {
            std::cerr << ex.getMessage( ) << std::endl;
        } // catch

        VisibilityMap map4( Vector3( -134000.000, 0, 186000.0 ), Vector3( -70000, 0, 250000.0 ), 128 );
        map4.getTile( 5, 100 )->setVisibility( true );
        map4.getTile( 124, 124 )->setVisibility( true );
        VisibilityMap::saveToFile( "visibilityMap2.bin", map4 );




        VisibilityMap map5( Vector3( -134000.000, 0, 186000.0 ), Vector3( -70000, 0, 250000.0 ), 128 );
        map5.getTile( 5, 100 )->setVisibility( true );
        map5.getTile( 100, 18 )->setVisibility( true );    

        /*
          std::cout << std::endl;
          std::cout << "Center: " << map5.getAreaCenter( 6, 9 ).toString( ) << std::endl;

          std::cout << map5.getTile( 105, 21 )->getCenter( ).toString( ) << std::endl;
          std::cout << map5.getTile(  map5.getAreaCenter( 6, 9 ) )->getCenter( ).toString( ) << std::endl;
        */
        const Spatial::VisibilityMap::TilePtr& tile6 = map5.getNearestVisibleTileToPosition( map5.getAreaCenter( 6, 9 ) );
        TS_ASSERT_EQUALS( tile6->getRow( ), map5.getTile( 100, 18 )->getRow( ) )
        TS_ASSERT_EQUALS( tile6->getCol( ), map5.getTile( 100, 18 )->getCol( ) )

            //std::cout << tile6->getCenter( ).toString( ) << std::endl;    
            //std::cout << "Tile: " << tile6->getRow( ) << " " << tile6->getCol( ) << std::endl;    
            //std::cout << "Next tile: " << map5.getNextVisibleTile( 6, 9 )->getCenter( ).toString( ) << std::endl;

            // map5.getNextVisibleTile( 6, 9 )
            const Spatial::VisibilityMap::TilePtr& tile7 = map5.getTile( map5.getNextVisibleTile( 6, 9 )->getCenter( ) );
        TS_ASSERT_EQUALS( tile7->getRow( ), map5.getTile( 100, 18 )->getRow( ) )
        TS_ASSERT_EQUALS( tile7->getCol( ), map5.getTile( 100, 18 )->getCol( ) )

            //std::cout << tile7->getRow( ) << " " << tile7->getCol( ) << std::endl;

            //StaticEntity e2( 2, "e2", Math::Vector3( -80604.0, 229448.0, 0 ), Math::Dimension3(250, 1800, 250 ), Math::Quaternion( Math::Vector3::Z_UNIT, 0 ) );
    
            //const Spatial::VisibilityMap::TilePtr& tile8 = map5.getTile( Math::Vector3( -53396, 0, -43448 ) );
            //const Spatial::VisibilityMap::TilePtr& tile8 = map5.getTile( Math::Vector3( -80604.0, 0, 229448.0 ) );
            //std::cout << tile8->getRow( ) << " " << tile8->getCol( ) << std::endl;
            //TS_ASSERT( map5.isInsideArea( e2, 2, 9 ) )


       } 

}; // class
