.\"                                      Hey, EMACS: -*- nroff -*-
.\" Man page for moses-exec
.\"
.\" Copyright (C) 2011 Linas Vepstas
.\"
.\" First parameter, NAME, should be all caps
.\" Second parameter, SECTION, should be 1-8, maybe w/ subsection
.\" other parameters are allowed: see man(7), man(1)
.pc
.TH MOSES 1 "December 29, 2011"
.LO 1
.\" Please adjust this date whenever revising the manpage.
.\"
.\" Some roff macros, for reference:
.\" .nh        disable hyphenation
.\" .hy        enable hyphenation
.\" .ad l      left justify
.\" .ad b      justify to both left and right margins
.\" .nf        disable filling
.\" .fi        enable filling
.\" .br        insert line break
.\" .sp <n>    insert n+1 empty lines
.\" for manpage-specific macros, see man(7)
.SH NAME
moses \- meta-optimizing semantic evolutionary search solver
.SH SYNOPSIS
.\" The help & version command line
.B moses
.RB \-h 
.br
.\" The general command line
.B moses
.RB [ \-B 
.IR knob_effort ]
.RB [ \-c 
.IR result_count ]
.RB [ \-d1 ]
.RB [ \-E 
.IR reduct_effort ]
.RB [ \-e 
.IR exemplar ]
.RB [ \-F ]
.RB [ \-f 
.IR logfile ]
.RB [ \-g
.IR max_gens ]
.RB [ \-j
.IR jobs ]
.RB [ \-k
.IR problem_size ]
.RB [ \-l
.IR loglevel ]
.RB [ \-m
.IR max_evals ]
.RB [ \-o
.IR output_file ]
.RB [ \-r
.IR random_seed ]
.RB [ \-S0 ]
.RB [ \-s1 ]
.RB [ \-t1 ]
.RB [ \-V1 ]
.RB [ \-W1 ]
.RB [ \-x1 ]
.RB [ \-y
.IR combo_program ]
.SH DESCRIPTION
.PP
.\" TeX users may be more comfortable with the \fB<whatever>\fP and
.\" \fI<whatever>\fP escape sequences to invode bold face and italics, 
.\" respectively.
\fBmoses\fP is the command-line wrapper to the MOSES program learning
library. It may be used to solve learning tasks specified with file inputs,
or to run various demonstration problems.
.PP
.\" ============================================================
.SH OPTIONS
.PP
Options fall into two classes: those that are used to run \fBmoses\fP in
demo mode, and those used for practical problem solving.
.SS "General options"
.TP
.BI \-e\  exemplar
Specify an initial \fIexemplar\fR to use. Each exemplar is written in
combo. May be specified multiple times.
.TP
.B \-h, --help
Print help.
.TP
.BI \-j\  num \fR,\ \fB\-\-jobs= num
Allocate \fInum\fR jobs for deme optimization.
Jobs can be executed on a remote machine as well,
in such case the notation \fB\-j\fR \fIN:REMOTE_HOST\fR is used,
where \fIN\fR is the number of jobs on the machine \fIREMOTE_HOST\fR.
For instance, one can enter the options
\fB\-j\fR4 \fB\-j\fR16:my_server.org
(or \fB\-j\fR16:user@my_server.org if one wishes to
run the remote jobs under a different user name),
meaning that 4 jobs are allocated on the local machine
and 16 jobs are allocated on my_server.org.
The assumption is that moses must be on the remote
machine and is located in a directory included in the
\fBPATH\fR environment variable. Beware that a lot of log
files are going to be generated when using this option on
the remote machines.

.\" ============================================================
.SS "Algorithm control options"
These options provide overall control over the algorithm execution.
.TP
.BI \-B\  effort \fR,\ \fB\-\-reduct\-knob\-building\-effort= effort
Effort allocated for reduction during the knob-building stage.
Valid values are in the range 0-3, with 0 standing for minimum effort,
and 3 for maximum effort. Larger efforts result in demes with fewer
knobs, thus lowering the overall dimension of the problem. This can
improve performance by effectively reducing the size of the problem.
The default \fIeffort\fR is 2.
.TP
.BI \-d1\fR,\ \fB\-\-reduce\-all=1
Reduce candidates before scoring evalutation. Otherwise, only dominating
candidates are reduced, just before being added to the metapopulation.
This flag may be useful if scoring function evaluation expense depends
strongly one the structure of the candidate. It is particularly important
to specify this flage when memoization is enabled (with \fB-s!\fR).
.TP
.BI \-E\  effort \fR,\ \fB\-\-reduct\-candidate\-effort= effort
Effort allocated for reduction of candidates. Valid values are
in the range 0-3, with 0 standing for minimum effort, and 3 
for maximum effort. For certain very symmetric problems, such
as the disjunct problem, greater reduction can lead to significantly
faster solution-finding.  The default \fIeffort\fR is 2.
.TP
.BI \-g\  num \fR,\ \fB\-\-max\-gens= num
Create and optimize no more than \fInum\fR demes.  Negative numbers
are interpreted as "unlimited". By default, the number of demes is
unlimited.
.TP
.BI \-m\  num \fR,\ \fB\-\-max\-evals= num
Perform no more than \fInum\fR evaluations of the scoring function.
Default value is 10000.
.TP
.BI \-r\  seed \fR,\ \fB\-\-random\-seed= seed
Use \fIseed\fR as the seed value for the pseudo-random number generator.
.TP
.BI \-s1\fR,\ \fB\-\-enable\-cache=1
Enable memoization of candidate scores.  This allows the number of scoring
function evaluations to be reduced, by maintaining a cache of recently
scored candidates. If a new candidate is found in the cache, that score
is used, instead of a scoring function evaluation.  The effectiveness of
memoization is greatly increased by also using the \fB\-d1\fR flag.

.\" ============================================================
.SS "Output control options"
These options control the displayed output.
.TP
.BI \-c\  count \fR,\ \fB\-\-result\-count= count
The number of non-dominated (best) results to return, ordered according
to score. If negative, then all results are returned, including the 
dominated results.
.TP
.BI \-f\  filename \fR,\ \fB\-\-log\-file= filename
Write debug log traces \fIfilename\fR. If not specified, traces
are written to \fBmoses.log\fR.
.TP
.BI \-F\fR,\ \fB\-\-log\-file\-dep\-opt
Write debug log traces to a filename constructed from the passed
option flags and values. The filename will be truncated to a maximum
of 255 characters.
.TP
.BI \-l\  loglevel \fR,\ \fB\-\-log\-level= loglevel
Specify the level of detail for debug loging. Possible
values for \fIloglevel\fR are \fBNONE\fR, \fBERROR\fR, \fBWARN\fR,
\fBINFO\fR, \fBDEBUG\fR, and \fBFINE\fR. Case does not matter. 
Caution: excessive logging detail can lead to significant
program slowdown.
.TP
.BI \-o\  filename \fR,\ \fB\-\-output\-file= filename
Write results to \fIfilename\fR. If not specified, results are written to
\fBstdout\fR.
.TP
.BI \-S0\fR,\ \fB\-\-output\-score=0
Prevent printing of the score.
.TP
.BI \-t1\fR,\ \fB\-\-output\-bscore=1
Print the behavioural score.
.TP
.BI \-V1\fR,\ \fB\-\-output\-eval\-number=1
Print the number of evaluations performed.
.TP
.BI \-W1\fR,\ \fB\-\-output\-with\-labels=1
Use named labels instead of position placeholders when printing 
candidates. For example, *("#temperature" "#entropy") instead
of *(#3 #4). This option is effective only when the data file
contains labels in its header.
.TP
.BI \-x1\fR,\ \fB\-\-output\-complexity=1
Print the complexity score.
.\" ============================================================
.SS "Demo options"
These options pertain to the varius built-in demo and example modes.
.TP
.BI \-H\  type \fR,\ \fB\-\-problem\-type= type
A number of demonstration problems are supported. In each case, the top 
results are printed to stdout, as a score, followed by a combo program.
.I type
may be one of:
.TS
tab (@);
l lx.
\fBcp\fR@T{
Combo program regression. The scoring function is based on the
combo program specified with the \fB-y\fR flag. That is, the goal of
the run is to deduce and learn the specified combo program. 
T}
\fBdj\fR@T{
Disjunction problem. The scoring function awards a result that is a
boolean disjunction (\fIor\fR) of \fIN\fR boolean-valued variables.
The resulting combo program should be \fIor(#1 #2 ...)\fR.
The size of the problem may be specified with the \fB\-k\fR option.
T}
\fBmux\fR@T{
Multiplex problem. The scoring function models a boolean digital
multiplexer, that is, an electronic circuit where an "address" of \fIn\fR
bits selects one and only one line, out of \fI2^n\fR possible lines. Thus,
for example, a single address bit can select one of two possible lines:
the first, if its false, and the second, if its true. The \fB\-k\fR
option may be used to specify the value of \fIn\fR.  The actual size
of the problem, measured in bits, is \fIn+2^n\fR and so increases
exponentially fast.
T}
\fBpa\fR@T{
Even parity problem.  The resulting combo program computes the parity of
\fIk\fR bits, evaluating to true if the parity is even, else evaluating
to false.
The size of the problem may be specified with the \fB\-k\fR option.
T}
.TE

The size of the demonstration problem may be specified with the -k flag.
.TP
.BI \-k\  size \fR,\ \fB\-\-problem\-size= size
Specify the size of the problem.  The interpretation of \fIsize\fR
depends on the particular problem type.
.TP
.BI \-y\  prog \fR,\ \fB\-\-combo\-program= prog
Specify the combo prorgram to be learned, when used in combination with
the \fB-H cp\fR option.  Thus, for example, \fB-H cp -y "and(#1 #2)"\fR
specifies that the two-input conjunction is to be learned.
.PP
.\" ============================================================
.SH USE
.PP
\fBmoses\fR will run demo problems or solve real problems from data files.
.PP
Other remarks ...
.TP
.B moses \-j jobs
.PP
.RE
.SH SEE ALSO
.br
More information is available at
.B http://wiki.opencog.org/w/MOSES
.SH AUTHORS
.nh
moses was written by Moshe Looks, Nil Geisweiller, and many others.
.PP
This manual page is being written by Linas Vepstas. COMPLETELY INCOMPLETE.
